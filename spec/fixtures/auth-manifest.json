{
  "command": {
    "ComputeExponent": {
      "scoped_path": [
        "ComputeExponent"
      ],
      "scoped_name": "ComputeExponent",
      "scoped_short_name": "ComputeExponent",
      "scoped_prefix": null,
      "scoped_full_path": [
        "ComputeExponent"
      ],
      "scoped_full_name": "ComputeExponent",
      "scoped_category": "command",
      "reference": "ComputeExponent",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "domain",
        "global_organization::global_domain"
      ],
      "types_depended_on": [
        "Foobara::Auth::Types::Role",
        "Foobara::Auth::Types::User",
        "array",
        "attributes",
        "detached_entity",
        "duck",
        "email",
        "integer",
        "string",
        "symbol"
      ],
      "inputs_types_depended_on": [
        "array",
        "attributes",
        "duck",
        "integer",
        "symbol"
      ],
      "result_types_depended_on": [
        "integer"
      ],
      "errors_types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "possible_errors": {
        "data.base.cannot_cast": {
          "path": [
            "base"
          ],
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.base.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "integer"
              }
            }
          }
        },
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "attributes",
                "element_type_declarations": {
                  "base": {
                    "type": "integer"
                  },
                  "exponent": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "data.exponent.cannot_cast": {
          "path": [
            "exponent"
          ],
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.exponent.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "integer"
              }
            }
          }
        },
        "data.unexpected_attributes": {
          "category": "data",
          "symbol": "unexpected_attributes",
          "key": "data.unexpected_attributes",
          "error": "attributes::SupportedProcessors::ElementTypeDeclarations::UnexpectedAttributesError",
          "processor_class": "attributes::SupportedProcessors::ElementTypeDeclarations",
          "processor_manifest_data": {
            "element_type_declarations": {
              "base": {
                "type": "integer"
              },
              "exponent": {
                "type": "integer"
              }
            }
          }
        },
        "runtime.unauthenticated": {
          "category": "runtime",
          "symbol": "unauthenticated",
          "key": "runtime.unauthenticated",
          "error": "Foobara::CommandConnector::UnauthenticatedError"
        }
      },
      "inputs_type": {
        "type": "attributes",
        "element_type_declarations": {
          "base": {
            "type": "integer"
          },
          "exponent": {
            "type": "integer"
          }
        }
      },
      "description": null,
      "result_type": {
        "type": "integer"
      },
      "errors_transformers": [
        {
          "scoped_path": [
            "Transformers",
            "AuthErrorsTransformer"
          ],
          "scoped_name": "Transformers::AuthErrorsTransformer",
          "scoped_short_name": "AuthErrorsTransformer",
          "scoped_prefix": [
            "Transformers"
          ],
          "scoped_full_path": [
            "Foobara",
            "CommandConnectors",
            "Transformers",
            "AuthErrorsTransformer"
          ],
          "scoped_full_name": "Foobara::CommandConnectors::Transformers::AuthErrorsTransformer",
          "scoped_category": "processor_class",
          "reference": "Foobara::CommandConnectors::Transformers::AuthErrorsTransformer",
          "domain": "Foobara::CommandConnectors",
          "organization": "Foobara",
          "parent": [
            "domain",
            "Foobara::CommandConnectors"
          ],
          "name": "Foobara::CommandConnectors::Transformers::AuthErrorsTransformer",
          "processor_type": "transformer"
        }
      ],
      "serializers": [
        "Foobara::CommandConnectors::Serializers::ErrorsSerializer",
        "Foobara::CommandConnectors::Serializers::AtomicSerializer",
        "Foobara::CommandConnectors::Serializers::JsonSerializer"
      ],
      "requires_authentication": true,
      "authenticator": true
    },
    "Foobara::Auth::Login": {
      "scoped_path": [
        "Login"
      ],
      "scoped_name": "Login",
      "scoped_short_name": "Login",
      "scoped_prefix": null,
      "scoped_full_path": [
        "Foobara",
        "Auth",
        "Login"
      ],
      "scoped_full_name": "Foobara::Auth::Login",
      "scoped_category": "command",
      "reference": "Foobara::Auth::Login",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::Auth"
      ],
      "types_depended_on": [
        "Foobara::Auth::Types::User",
        "array",
        "attributes",
        "duck",
        "email",
        "integer",
        "string",
        "symbol"
      ],
      "inputs_types_depended_on": [
        "Foobara::Auth::Types::User",
        "array",
        "attributes",
        "duck",
        "integer",
        "string",
        "symbol"
      ],
      "result_types_depended_on": [
        "array",
        "attributes",
        "duck",
        "string",
        "symbol"
      ],
      "errors_types_depended_on": [
        "array",
        "attributes",
        "duck",
        "email",
        "integer",
        "string",
        "symbol"
      ],
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "attributes",
                "element_type_declarations": {
                  "username_or_email": {
                    "allow_nil": true,
                    "type": "string"
                  },
                  "plaintext_password": {
                    "sensitive_exposed": true,
                    "type": "string"
                  }
                },
                "required": [
                  "plaintext_password"
                ]
              }
            }
          }
        },
        "data.missing_required_attribute": {
          "category": "data",
          "symbol": "missing_required_attribute",
          "key": "data.missing_required_attribute",
          "error": "attributes::SupportedValidators::Required::MissingRequiredAttributeError",
          "processor_class": "Foobara::Value::Processor::Pipeline",
          "processor_manifest_data": {
            "pipeline": null
          }
        },
        "data.plaintext_password.cannot_cast": {
          "path": [
            "plaintext_password"
          ],
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.plaintext_password.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "sensitive_exposed": true,
                "type": "string"
              }
            }
          }
        },
        "data.plaintext_password.missing_required_attribute": {
          "path": [
            "plaintext_password"
          ],
          "category": "data",
          "symbol": "missing_required_attribute",
          "key": "data.plaintext_password.missing_required_attribute",
          "error": "attributes::SupportedValidators::Required::MissingRequiredAttributeError",
          "processor_class": "attributes::SupportedValidators::Required",
          "processor_manifest_data": {
            "required": [
              "plaintext_password"
            ]
          }
        },
        "data.unexpected_attributes": {
          "category": "data",
          "symbol": "unexpected_attributes",
          "key": "data.unexpected_attributes",
          "error": "attributes::SupportedProcessors::ElementTypeDeclarations::UnexpectedAttributesError",
          "processor_class": "attributes::SupportedProcessors::ElementTypeDeclarations",
          "processor_manifest_data": {
            "element_type_declarations": {
              "username_or_email": {
                "allow_nil": true,
                "type": "string"
              },
              "plaintext_password": {
                "sensitive_exposed": true,
                "type": "string"
              }
            }
          }
        },
        "data.username_or_email.cannot_cast": {
          "path": [
            "username_or_email"
          ],
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.username_or_email.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "allow_nil": true,
                "type": "string"
              }
            }
          }
        },
        "foobara::auth::find_user>runtime.user_not_found": {
          "runtime_path": [
            "foobara::auth::find_user"
          ],
          "category": "runtime",
          "symbol": "user_not_found",
          "key": "foobara::auth::find_user>runtime.user_not_found",
          "error": "Foobara::Auth::FindUser::UserNotFoundError"
        },
        "runtime.invalid_password": {
          "category": "runtime",
          "symbol": "invalid_password",
          "key": "runtime.invalid_password",
          "error": "Foobara::Auth::Login::InvalidPasswordError"
        },
        "runtime.no_user_id_email_or_username_given": {
          "category": "runtime",
          "symbol": "no_user_id_email_or_username_given",
          "key": "runtime.no_user_id_email_or_username_given",
          "error": "Foobara::Auth::Login::NoUserIdEmailOrUsernameGivenError"
        }
      },
      "depends_on": [
        "Foobara::Auth::BuildAccessToken",
        "Foobara::Auth::CreateRefreshToken",
        "Foobara::Auth::FindUser",
        "Foobara::Auth::VerifyPassword"
      ],
      "inputs_type": {
        "type": "attributes",
        "element_type_declarations": {
          "username_or_email": {
            "allow_nil": true,
            "type": "string"
          },
          "plaintext_password": {
            "sensitive_exposed": true,
            "type": "string"
          }
        },
        "required": [
          "plaintext_password"
        ]
      },
      "description": null,
      "result_type": {
        "type": "attributes",
        "element_type_declarations": {}
      },
      "inputs_transformers": [
        {
          "scoped_path": [
            "17d8"
          ],
          "scoped_name": "17d8",
          "scoped_short_name": "17d8",
          "scoped_prefix": null,
          "scoped_full_path": [
            "17d8"
          ],
          "scoped_full_name": "17d8",
          "scoped_category": "processor_class",
          "reference": "17d8",
          "domain": "global_organization::global_domain",
          "organization": "global_organization",
          "parent": [
            "domain",
            "global_organization::global_domain"
          ],
          "name": "Anonymous",
          "processor_type": "transformer"
        }
      ],
      "serializers": [
        "Foobara::CommandConnectors::Serializers::ErrorsSerializer",
        "Foobara::CommandConnectors::Serializers::AtomicSerializer",
        "Foobara::CommandConnectors::Serializers::JsonSerializer"
      ],
      "response_mutators": [
        {
          "scoped_path": [
            "17c0"
          ],
          "scoped_name": "17c0",
          "scoped_short_name": "17c0",
          "scoped_prefix": null,
          "scoped_full_path": [
            "17c0"
          ],
          "scoped_full_name": "17c0",
          "scoped_category": "processor_class",
          "reference": "17c0",
          "domain": "global_organization::global_domain",
          "organization": "global_organization",
          "parent": [
            "domain",
            "global_organization::global_domain"
          ],
          "name": "Anonymous",
          "processor_type": "mutator"
        },
        {
          "scoped_path": [
            "17c8"
          ],
          "scoped_name": "17c8",
          "scoped_short_name": "17c8",
          "scoped_prefix": null,
          "scoped_full_path": [
            "17c8"
          ],
          "scoped_full_name": "17c8",
          "scoped_category": "processor_class",
          "reference": "17c8",
          "domain": "global_organization::global_domain",
          "organization": "global_organization",
          "parent": [
            "domain",
            "global_organization::global_domain"
          ],
          "name": "Anonymous",
          "processor_type": "mutator"
        }
      ],
      "authenticator": true
    },
    "Foobara::Auth::Logout": {
      "scoped_path": [
        "Logout"
      ],
      "scoped_name": "Logout",
      "scoped_short_name": "Logout",
      "scoped_prefix": null,
      "scoped_full_path": [
        "Foobara",
        "Auth",
        "Logout"
      ],
      "scoped_full_name": "Foobara::Auth::Logout",
      "scoped_category": "command",
      "reference": "Foobara::Auth::Logout",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::Auth"
      ],
      "types_depended_on": [
        "Foobara::Auth::Types::Role",
        "Foobara::Auth::Types::Token",
        "Foobara::Auth::Types::User",
        "Foobara::Auth::token_state",
        "array",
        "attributes",
        "datetime",
        "detached_entity",
        "duck",
        "email",
        "integer",
        "string",
        "symbol"
      ],
      "inputs_types_depended_on": [
        "array",
        "attributes",
        "duck",
        "string",
        "symbol"
      ],
      "result_types_depended_on": [
        "duck"
      ],
      "errors_types_depended_on": [
        "Foobara::Auth::token_state",
        "array",
        "attributes",
        "duck",
        "string",
        "symbol"
      ],
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "attributes",
                "element_type_declarations": {
                  "refresh_token": {
                    "allow_nil": true,
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "data.refresh_token.cannot_cast": {
          "path": [
            "refresh_token"
          ],
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.refresh_token.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "allow_nil": true,
                "type": "string"
              }
            }
          }
        },
        "data.unexpected_attributes": {
          "category": "data",
          "symbol": "unexpected_attributes",
          "key": "data.unexpected_attributes",
          "error": "attributes::SupportedProcessors::ElementTypeDeclarations::UnexpectedAttributesError",
          "processor_class": "attributes::SupportedProcessors::ElementTypeDeclarations",
          "processor_manifest_data": {
            "element_type_declarations": {
              "refresh_token": {
                "allow_nil": true,
                "type": "string"
              }
            }
          }
        },
        "foobara::auth::verify_token>runtime.expired_token": {
          "runtime_path": [
            "foobara::auth::verify_token"
          ],
          "category": "runtime",
          "symbol": "expired_token",
          "key": "foobara::auth::verify_token>runtime.expired_token",
          "error": "Foobara::Auth::VerifyToken::ExpiredTokenError"
        },
        "foobara::auth::verify_token>runtime.inactive_token": {
          "runtime_path": [
            "foobara::auth::verify_token"
          ],
          "category": "runtime",
          "symbol": "inactive_token",
          "key": "foobara::auth::verify_token>runtime.inactive_token",
          "error": "Foobara::Auth::VerifyToken::InactiveTokenError"
        },
        "runtime.invalid_refresh_token": {
          "category": "runtime",
          "symbol": "invalid_refresh_token",
          "key": "runtime.invalid_refresh_token",
          "error": "Foobara::Auth::Logout::InvalidRefreshTokenError"
        }
      },
      "depends_on": [
        "Foobara::Auth::VerifyToken"
      ],
      "inputs_type": {
        "type": "attributes",
        "element_type_declarations": {}
      },
      "description": null,
      "result_type": {
        "type": "duck"
      },
      "serializers": [
        "Foobara::CommandConnectors::Serializers::ErrorsSerializer",
        "Foobara::CommandConnectors::Serializers::AtomicSerializer",
        "Foobara::CommandConnectors::Serializers::JsonSerializer"
      ],
      "response_mutators": [
        {
          "scoped_path": [
            "1800"
          ],
          "scoped_name": "1800",
          "scoped_short_name": "1800",
          "scoped_prefix": null,
          "scoped_full_path": [
            "1800"
          ],
          "scoped_full_name": "1800",
          "scoped_category": "processor_class",
          "reference": "1800",
          "domain": "global_organization::global_domain",
          "organization": "global_organization",
          "parent": [
            "domain",
            "global_organization::global_domain"
          ],
          "name": "Anonymous",
          "processor_type": "mutator"
        }
      ],
      "request_mutators": [
        {
          "scoped_path": [
            "17f8"
          ],
          "scoped_name": "17f8",
          "scoped_short_name": "17f8",
          "scoped_prefix": null,
          "scoped_full_path": [
            "17f8"
          ],
          "scoped_full_name": "17f8",
          "scoped_category": "processor_class",
          "reference": "17f8",
          "domain": "global_organization::global_domain",
          "organization": "global_organization",
          "parent": [
            "domain",
            "global_organization::global_domain"
          ],
          "name": "Anonymous",
          "processor_type": "mutator"
        }
      ],
      "authenticator": true
    },
    "Foobara::Auth::RefreshLogin": {
      "scoped_path": [
        "RefreshLogin"
      ],
      "scoped_name": "RefreshLogin",
      "scoped_short_name": "RefreshLogin",
      "scoped_prefix": null,
      "scoped_full_path": [
        "Foobara",
        "Auth",
        "RefreshLogin"
      ],
      "scoped_full_name": "Foobara::Auth::RefreshLogin",
      "scoped_category": "command",
      "reference": "Foobara::Auth::RefreshLogin",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::Auth"
      ],
      "types_depended_on": [
        "Foobara::Auth::Types::Token",
        "Foobara::Auth::token_state",
        "array",
        "attributes",
        "datetime",
        "detached_entity",
        "duck",
        "integer",
        "string",
        "symbol"
      ],
      "inputs_types_depended_on": [
        "array",
        "attributes",
        "duck",
        "integer",
        "string",
        "symbol"
      ],
      "result_types_depended_on": [
        "array",
        "attributes",
        "duck",
        "string",
        "symbol"
      ],
      "errors_types_depended_on": [
        "Foobara::Auth::token_state",
        "array",
        "attributes",
        "duck",
        "string",
        "symbol"
      ],
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "attributes",
                "element_type_declarations": {
                  "refresh_token": {
                    "sensitive": true,
                    "type": "string"
                  }
                },
                "required": [
                  "refresh_token"
                ]
              }
            }
          }
        },
        "data.missing_required_attribute": {
          "category": "data",
          "symbol": "missing_required_attribute",
          "key": "data.missing_required_attribute",
          "error": "attributes::SupportedValidators::Required::MissingRequiredAttributeError",
          "processor_class": "Foobara::Value::Processor::Pipeline",
          "processor_manifest_data": {
            "pipeline": null
          }
        },
        "data.refresh_token.cannot_cast": {
          "path": [
            "refresh_token"
          ],
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.refresh_token.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "sensitive": true,
                "type": "string"
              }
            }
          }
        },
        "data.refresh_token.missing_required_attribute": {
          "path": [
            "refresh_token"
          ],
          "category": "data",
          "symbol": "missing_required_attribute",
          "key": "data.refresh_token.missing_required_attribute",
          "error": "attributes::SupportedValidators::Required::MissingRequiredAttributeError",
          "processor_class": "attributes::SupportedValidators::Required",
          "processor_manifest_data": {
            "required": [
              "refresh_token"
            ]
          }
        },
        "data.unexpected_attributes": {
          "category": "data",
          "symbol": "unexpected_attributes",
          "key": "data.unexpected_attributes",
          "error": "attributes::SupportedProcessors::ElementTypeDeclarations::UnexpectedAttributesError",
          "processor_class": "attributes::SupportedProcessors::ElementTypeDeclarations",
          "processor_manifest_data": {
            "element_type_declarations": {
              "refresh_token": {
                "sensitive": true,
                "type": "string"
              }
            }
          }
        },
        "foobara::auth::verify_token>runtime.expired_token": {
          "runtime_path": [
            "foobara::auth::verify_token"
          ],
          "category": "runtime",
          "symbol": "expired_token",
          "key": "foobara::auth::verify_token>runtime.expired_token",
          "error": "Foobara::Auth::VerifyToken::ExpiredTokenError"
        },
        "foobara::auth::verify_token>runtime.inactive_token": {
          "runtime_path": [
            "foobara::auth::verify_token"
          ],
          "category": "runtime",
          "symbol": "inactive_token",
          "key": "foobara::auth::verify_token>runtime.inactive_token",
          "error": "Foobara::Auth::VerifyToken::InactiveTokenError"
        },
        "runtime.invalid_refresh_token": {
          "category": "runtime",
          "symbol": "invalid_refresh_token",
          "key": "runtime.invalid_refresh_token",
          "error": "Foobara::Auth::RefreshLogin::InvalidRefreshTokenError"
        },
        "runtime.refresh_token_not_owned_by_user": {
          "category": "runtime",
          "symbol": "refresh_token_not_owned_by_user",
          "key": "runtime.refresh_token_not_owned_by_user",
          "error": "Foobara::Auth::RefreshLogin::RefreshTokenNotOwnedByUser"
        }
      },
      "depends_on": [
        "Foobara::Auth::BuildAccessToken",
        "Foobara::Auth::CreateRefreshToken",
        "Foobara::Auth::VerifyToken"
      ],
      "inputs_type": {
        "type": "attributes",
        "element_type_declarations": {}
      },
      "description": null,
      "result_type": {
        "type": "attributes",
        "element_type_declarations": {}
      },
      "inputs_transformers": [
        {
          "scoped_path": [
            "17f0"
          ],
          "scoped_name": "17f0",
          "scoped_short_name": "17f0",
          "scoped_prefix": null,
          "scoped_full_path": [
            "17f0"
          ],
          "scoped_full_name": "17f0",
          "scoped_category": "processor_class",
          "reference": "17f0",
          "domain": "global_organization::global_domain",
          "organization": "global_organization",
          "parent": [
            "domain",
            "global_organization::global_domain"
          ],
          "name": "Anonymous",
          "processor_type": "transformer"
        }
      ],
      "serializers": [
        "Foobara::CommandConnectors::Serializers::ErrorsSerializer",
        "Foobara::CommandConnectors::Serializers::AtomicSerializer",
        "Foobara::CommandConnectors::Serializers::JsonSerializer"
      ],
      "response_mutators": [
        {
          "scoped_path": [
            "17c0"
          ],
          "scoped_name": "17c0",
          "scoped_short_name": "17c0",
          "scoped_prefix": null,
          "scoped_full_path": [
            "17c0"
          ],
          "scoped_full_name": "17c0",
          "scoped_category": "processor_class",
          "reference": "17c0",
          "domain": "global_organization::global_domain",
          "organization": "global_organization",
          "parent": [
            "domain",
            "global_organization::global_domain"
          ],
          "name": "Anonymous",
          "processor_type": "mutator"
        },
        {
          "scoped_path": [
            "17c8"
          ],
          "scoped_name": "17c8",
          "scoped_short_name": "17c8",
          "scoped_prefix": null,
          "scoped_full_path": [
            "17c8"
          ],
          "scoped_full_name": "17c8",
          "scoped_category": "processor_class",
          "reference": "17c8",
          "domain": "global_organization::global_domain",
          "organization": "global_organization",
          "parent": [
            "domain",
            "global_organization::global_domain"
          ],
          "name": "Anonymous",
          "processor_type": "mutator"
        }
      ],
      "request_mutators": [
        {
          "scoped_path": [
            "17e8"
          ],
          "scoped_name": "17e8",
          "scoped_short_name": "17e8",
          "scoped_prefix": null,
          "scoped_full_path": [
            "17e8"
          ],
          "scoped_full_name": "17e8",
          "scoped_category": "processor_class",
          "reference": "17e8",
          "domain": "global_organization::global_domain",
          "organization": "global_organization",
          "parent": [
            "domain",
            "global_organization::global_domain"
          ],
          "name": "Anonymous",
          "processor_type": "mutator"
        }
      ],
      "authenticator": true
    },
    "Foobara::Auth::Register": {
      "scoped_path": [
        "Register"
      ],
      "scoped_name": "Register",
      "scoped_short_name": "Register",
      "scoped_prefix": null,
      "scoped_full_path": [
        "Foobara",
        "Auth",
        "Register"
      ],
      "scoped_full_name": "Foobara::Auth::Register",
      "scoped_category": "command",
      "reference": "Foobara::Auth::Register",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::Auth"
      ],
      "types_depended_on": [
        "Foobara::Auth::Types::User",
        "array",
        "attributes",
        "duck",
        "email",
        "string",
        "symbol"
      ],
      "inputs_types_depended_on": [
        "array",
        "attributes",
        "duck",
        "email",
        "string",
        "symbol"
      ],
      "result_types_depended_on": [
        "Foobara::Auth::Types::User"
      ],
      "errors_types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "attributes",
                "element_type_declarations": {
                  "username": {
                    "type": "string"
                  },
                  "email": {
                    "allow_nil": true,
                    "type": "email"
                  },
                  "plaintext_password": {
                    "allow_nil": true,
                    "sensitive_exposed": true,
                    "type": "string"
                  }
                },
                "required": [
                  "username"
                ]
              }
            }
          }
        },
        "data.email.cannot_cast": {
          "path": [
            "email"
          ],
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.email.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "allow_nil": true,
                "type": "email"
              }
            }
          }
        },
        "data.email.cannot_exceed64_characters": {
          "path": [
            "email"
          ],
          "category": "data",
          "symbol": "cannot_exceed64_characters",
          "key": "data.email.cannot_exceed64_characters",
          "error": "email::Validators::CannotExceed64Characters::CannotExceed64CharactersError",
          "processor_manifest_data": {
            "cannot_exceed64_characters": true
          }
        },
        "data.email.cannot_have_multiple_at_signs": {
          "path": [
            "email"
          ],
          "category": "data",
          "symbol": "cannot_have_multiple_at_signs",
          "key": "data.email.cannot_have_multiple_at_signs",
          "error": "email::Validators::CannotHaveMultipleAtSigns::CannotHaveMultipleAtSignsError",
          "processor_manifest_data": {
            "cannot_have_multiple_at_signs": true
          }
        },
        "data.email.domain_cannot_start_with_or_end_with_a_hyphen": {
          "path": [
            "email"
          ],
          "category": "data",
          "symbol": "domain_cannot_start_with_or_end_with_a_hyphen",
          "key": "data.email.domain_cannot_start_with_or_end_with_a_hyphen",
          "error": "email::Validators::DomainCannotStartWithOrEndWithAHyphen::DomainCannotStartWithOrEndWithAHyphenError",
          "processor_manifest_data": {
            "domain_cannot_start_with_or_end_with_a_hyphen": true
          }
        },
        "data.email.first_part_cannot_be_empty": {
          "path": [
            "email"
          ],
          "category": "data",
          "symbol": "first_part_cannot_be_empty",
          "key": "data.email.first_part_cannot_be_empty",
          "error": "email::Validators::FirstPartCannotBeEmpty::FirstPartCannotBeEmptyError",
          "processor_manifest_data": {
            "first_part_cannot_be_empty": true
          }
        },
        "data.email.first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row": {
          "path": [
            "email"
          ],
          "category": "data",
          "symbol": "first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row",
          "key": "data.email.first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row",
          "error": "email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARowError",
          "processor_manifest_data": {
            "first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row": true
          }
        },
        "data.email.first_part_has_bad_characters": {
          "path": [
            "email"
          ],
          "category": "data",
          "symbol": "first_part_has_bad_characters",
          "key": "data.email.first_part_has_bad_characters",
          "error": "email::Validators::FirstPartHasBadCharacters::FirstPartHasBadCharactersError",
          "processor_manifest_data": {
            "first_part_has_bad_characters": true
          }
        },
        "data.email.must_have_an_at_sign": {
          "path": [
            "email"
          ],
          "category": "data",
          "symbol": "must_have_an_at_sign",
          "key": "data.email.must_have_an_at_sign",
          "error": "email::Validators::MustHaveAnAtSign::MustHaveAnAtSignError",
          "processor_manifest_data": {
            "must_have_an_at_sign": true
          }
        },
        "data.email.second_part_cannot_be_empty": {
          "path": [
            "email"
          ],
          "category": "data",
          "symbol": "second_part_cannot_be_empty",
          "key": "data.email.second_part_cannot_be_empty",
          "error": "email::Validators::SecondPartCannotBeEmpty::SecondPartCannotBeEmptyError",
          "processor_manifest_data": {
            "second_part_cannot_be_empty": true
          }
        },
        "data.email.second_part_has_bad_characters": {
          "path": [
            "email"
          ],
          "category": "data",
          "symbol": "second_part_has_bad_characters",
          "key": "data.email.second_part_has_bad_characters",
          "error": "email::Validators::SecondPartHasBadCharacters::SecondPartHasBadCharactersError",
          "processor_manifest_data": {
            "second_part_has_bad_characters": true
          }
        },
        "data.missing_required_attribute": {
          "category": "data",
          "symbol": "missing_required_attribute",
          "key": "data.missing_required_attribute",
          "error": "attributes::SupportedValidators::Required::MissingRequiredAttributeError",
          "processor_class": "Foobara::Value::Processor::Pipeline",
          "processor_manifest_data": {
            "pipeline": null
          }
        },
        "data.plaintext_password.cannot_cast": {
          "path": [
            "plaintext_password"
          ],
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.plaintext_password.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "allow_nil": true,
                "sensitive_exposed": true,
                "type": "string"
              }
            }
          }
        },
        "data.unexpected_attributes": {
          "category": "data",
          "symbol": "unexpected_attributes",
          "key": "data.unexpected_attributes",
          "error": "attributes::SupportedProcessors::ElementTypeDeclarations::UnexpectedAttributesError",
          "processor_class": "attributes::SupportedProcessors::ElementTypeDeclarations",
          "processor_manifest_data": {
            "element_type_declarations": {
              "username": {
                "type": "string"
              },
              "email": {
                "allow_nil": true,
                "type": "email"
              },
              "plaintext_password": {
                "allow_nil": true,
                "sensitive_exposed": true,
                "type": "string"
              }
            }
          }
        },
        "data.username.cannot_cast": {
          "path": [
            "username"
          ],
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.username.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "string"
              }
            }
          }
        },
        "data.username.missing_required_attribute": {
          "path": [
            "username"
          ],
          "category": "data",
          "symbol": "missing_required_attribute",
          "key": "data.username.missing_required_attribute",
          "error": "attributes::SupportedValidators::Required::MissingRequiredAttributeError",
          "processor_class": "attributes::SupportedValidators::Required",
          "processor_manifest_data": {
            "required": [
              "username"
            ]
          }
        }
      },
      "depends_on": [
        "Foobara::Auth::CreateUser",
        "Foobara::Auth::SetPassword"
      ],
      "inputs_type": {
        "type": "attributes",
        "element_type_declarations": {
          "username": {
            "type": "string"
          },
          "email": {
            "allow_nil": true,
            "type": "email"
          },
          "plaintext_password": {
            "allow_nil": true,
            "sensitive_exposed": true,
            "type": "string"
          }
        },
        "required": [
          "username"
        ]
      },
      "description": null,
      "result_type": {
        "type": "Foobara::Auth::Types::User"
      },
      "result_transformers": [
        {
          "scoped_path": [
            "SensitiveValueRemover",
            "Foobara",
            "Auth",
            "Types",
            "User"
          ],
          "scoped_name": "SensitiveValueRemover::Foobara::Auth::Types::User",
          "scoped_short_name": "User",
          "scoped_prefix": [
            "SensitiveValueRemover",
            "Foobara",
            "Auth",
            "Types"
          ],
          "scoped_full_path": [
            "SensitiveValueRemover",
            "Foobara",
            "Auth",
            "Types",
            "User"
          ],
          "scoped_full_name": "SensitiveValueRemover::Foobara::Auth::Types::User",
          "scoped_category": "processor",
          "reference": "SensitiveValueRemover::Foobara::Auth::Types::User",
          "domain": "global_organization::global_domain",
          "organization": "global_organization",
          "processor_class": "Foobara::Entity::SensitiveValueRemovers::Entity"
        }
      ],
      "serializers": [
        "Foobara::CommandConnectors::Serializers::ErrorsSerializer",
        "Foobara::CommandConnectors::Serializers::AtomicSerializer",
        "Foobara::CommandConnectors::Serializers::JsonSerializer"
      ],
      "authenticator": true
    }
  },
  "domain": {
    "Foobara::Auth": {
      "scoped_path": [
        "Auth"
      ],
      "scoped_name": "Auth",
      "scoped_short_name": "Auth",
      "scoped_prefix": null,
      "scoped_full_path": [
        "Foobara",
        "Auth"
      ],
      "scoped_full_name": "Foobara::Auth",
      "scoped_category": "domain",
      "reference": "Foobara::Auth",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "organization",
        "Foobara"
      ],
      "commands": [
        "Foobara::Auth::Login",
        "Foobara::Auth::Logout",
        "Foobara::Auth::RefreshLogin",
        "Foobara::Auth::Register"
      ],
      "types": [
        "Foobara::Auth::Types::Role",
        "Foobara::Auth::Types::Token",
        "Foobara::Auth::Types::User",
        "Foobara::Auth::token_state"
      ]
    },
    "global_organization::global_domain": {
      "scoped_path": [],
      "scoped_name": null,
      "scoped_short_name": null,
      "scoped_prefix": [],
      "scoped_full_path": [],
      "scoped_full_name": "",
      "scoped_category": "domain",
      "reference": "global_organization::global_domain",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "organization",
        "global_organization"
      ],
      "commands": [
        "ComputeExponent"
      ],
      "types": [
        "array",
        "associative_array",
        "atomic_duck",
        "attributes",
        "datetime",
        "detached_entity",
        "duck",
        "duckture",
        "email",
        "entity",
        "integer",
        "model",
        "number",
        "string",
        "symbol"
      ]
    }
  },
  "error": {
    "Foobara::Auth::FindUser::UserNotFoundError": {
      "scoped_path": [
        "FindUser",
        "UserNotFoundError"
      ],
      "scoped_name": "FindUser::UserNotFoundError",
      "scoped_short_name": "UserNotFoundError",
      "scoped_prefix": [
        "FindUser"
      ],
      "scoped_full_path": [
        "Foobara",
        "Auth",
        "FindUser",
        "UserNotFoundError"
      ],
      "scoped_full_name": "Foobara::Auth::FindUser::UserNotFoundError",
      "scoped_category": "error",
      "reference": "Foobara::Auth::FindUser::UserNotFoundError",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::Auth"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "email",
        "integer",
        "string",
        "symbol"
      ],
      "category": "runtime",
      "symbol": "user_not_found",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "id": {
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "email"
          }
        }
      },
      "is_fatal": true,
      "error_class": "Foobara::Auth::FindUser::UserNotFoundError",
      "base_error": "Foobara::RuntimeError"
    },
    "Foobara::Auth::Login::InvalidPasswordError": {
      "scoped_path": [
        "InvalidPasswordError"
      ],
      "scoped_name": "InvalidPasswordError",
      "scoped_short_name": "InvalidPasswordError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "Foobara",
        "Auth",
        "Login",
        "InvalidPasswordError"
      ],
      "scoped_full_name": "Foobara::Auth::Login::InvalidPasswordError",
      "scoped_category": "error",
      "reference": "Foobara::Auth::Login::InvalidPasswordError",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "command",
        "Foobara::Auth::Login"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "runtime",
      "symbol": "invalid_password",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {}
      },
      "is_fatal": true,
      "error_class": "Foobara::Auth::Login::InvalidPasswordError",
      "base_error": "Foobara::RuntimeError"
    },
    "Foobara::Auth::Login::NoUserIdEmailOrUsernameGivenError": {
      "scoped_path": [
        "NoUserIdEmailOrUsernameGivenError"
      ],
      "scoped_name": "NoUserIdEmailOrUsernameGivenError",
      "scoped_short_name": "NoUserIdEmailOrUsernameGivenError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "Foobara",
        "Auth",
        "Login",
        "NoUserIdEmailOrUsernameGivenError"
      ],
      "scoped_full_name": "Foobara::Auth::Login::NoUserIdEmailOrUsernameGivenError",
      "scoped_category": "error",
      "reference": "Foobara::Auth::Login::NoUserIdEmailOrUsernameGivenError",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "command",
        "Foobara::Auth::Login"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "runtime",
      "symbol": "no_user_id_email_or_username_given",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {}
      },
      "is_fatal": true,
      "error_class": "Foobara::Auth::Login::NoUserIdEmailOrUsernameGivenError",
      "base_error": "Foobara::RuntimeError"
    },
    "Foobara::Auth::Logout::InvalidRefreshTokenError": {
      "scoped_path": [
        "InvalidRefreshTokenError"
      ],
      "scoped_name": "InvalidRefreshTokenError",
      "scoped_short_name": "InvalidRefreshTokenError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "Foobara",
        "Auth",
        "Logout",
        "InvalidRefreshTokenError"
      ],
      "scoped_full_name": "Foobara::Auth::Logout::InvalidRefreshTokenError",
      "scoped_category": "error",
      "reference": "Foobara::Auth::Logout::InvalidRefreshTokenError",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "command",
        "Foobara::Auth::Logout"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "string",
        "symbol"
      ],
      "category": "runtime",
      "symbol": "invalid_refresh_token",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "refresh_token_id": {
            "type": "string"
          }
        }
      },
      "is_fatal": true,
      "error_class": "Foobara::Auth::Logout::InvalidRefreshTokenError",
      "base_error": "Foobara::RuntimeError"
    },
    "Foobara::Auth::RefreshLogin::InvalidRefreshTokenError": {
      "scoped_path": [
        "InvalidRefreshTokenError"
      ],
      "scoped_name": "InvalidRefreshTokenError",
      "scoped_short_name": "InvalidRefreshTokenError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "Foobara",
        "Auth",
        "RefreshLogin",
        "InvalidRefreshTokenError"
      ],
      "scoped_full_name": "Foobara::Auth::RefreshLogin::InvalidRefreshTokenError",
      "scoped_category": "error",
      "reference": "Foobara::Auth::RefreshLogin::InvalidRefreshTokenError",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "command",
        "Foobara::Auth::RefreshLogin"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "string",
        "symbol"
      ],
      "category": "runtime",
      "symbol": "invalid_refresh_token",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "refresh_token_id": {
            "type": "string"
          }
        }
      },
      "is_fatal": true,
      "error_class": "Foobara::Auth::RefreshLogin::InvalidRefreshTokenError",
      "base_error": "Foobara::RuntimeError"
    },
    "Foobara::Auth::RefreshLogin::RefreshTokenNotOwnedByUser": {
      "scoped_path": [
        "RefreshTokenNotOwnedByUser"
      ],
      "scoped_name": "RefreshTokenNotOwnedByUser",
      "scoped_short_name": "RefreshTokenNotOwnedByUser",
      "scoped_prefix": null,
      "scoped_full_path": [
        "Foobara",
        "Auth",
        "RefreshLogin",
        "RefreshTokenNotOwnedByUser"
      ],
      "scoped_full_name": "Foobara::Auth::RefreshLogin::RefreshTokenNotOwnedByUser",
      "scoped_category": "error",
      "reference": "Foobara::Auth::RefreshLogin::RefreshTokenNotOwnedByUser",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "command",
        "Foobara::Auth::RefreshLogin"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "string",
        "symbol"
      ],
      "category": "runtime",
      "symbol": "refresh_token_not_owned_by_user",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "refresh_token_id": {
            "type": "string"
          }
        }
      },
      "is_fatal": true,
      "error_class": "Foobara::Auth::RefreshLogin::RefreshTokenNotOwnedByUser",
      "base_error": "Foobara::RuntimeError"
    },
    "Foobara::Auth::VerifyToken::ExpiredTokenError": {
      "scoped_path": [
        "VerifyToken",
        "ExpiredTokenError"
      ],
      "scoped_name": "VerifyToken::ExpiredTokenError",
      "scoped_short_name": "ExpiredTokenError",
      "scoped_prefix": [
        "VerifyToken"
      ],
      "scoped_full_path": [
        "Foobara",
        "Auth",
        "VerifyToken",
        "ExpiredTokenError"
      ],
      "scoped_full_name": "Foobara::Auth::VerifyToken::ExpiredTokenError",
      "scoped_category": "error",
      "reference": "Foobara::Auth::VerifyToken::ExpiredTokenError",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::Auth"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "runtime",
      "symbol": "expired_token",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {}
      },
      "is_fatal": true,
      "error_class": "Foobara::Auth::VerifyToken::ExpiredTokenError",
      "base_error": "Foobara::RuntimeError"
    },
    "Foobara::Auth::VerifyToken::InactiveTokenError": {
      "scoped_path": [
        "VerifyToken",
        "InactiveTokenError"
      ],
      "scoped_name": "VerifyToken::InactiveTokenError",
      "scoped_short_name": "InactiveTokenError",
      "scoped_prefix": [
        "VerifyToken"
      ],
      "scoped_full_path": [
        "Foobara",
        "Auth",
        "VerifyToken",
        "InactiveTokenError"
      ],
      "scoped_full_name": "Foobara::Auth::VerifyToken::InactiveTokenError",
      "scoped_category": "error",
      "reference": "Foobara::Auth::VerifyToken::InactiveTokenError",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::Auth"
      ],
      "types_depended_on": [
        "Foobara::Auth::token_state",
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "runtime",
      "symbol": "inactive_token",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "state": {
            "type": "Foobara::Auth::token_state"
          }
        },
        "required": [
          "state"
        ]
      },
      "is_fatal": true,
      "error_class": "Foobara::Auth::VerifyToken::InactiveTokenError",
      "base_error": "Foobara::RuntimeError"
    },
    "Foobara::CommandConnector::CommandConnectorError": {
      "scoped_path": [
        "CommandConnector",
        "CommandConnectorError"
      ],
      "scoped_name": "CommandConnector::CommandConnectorError",
      "scoped_short_name": "CommandConnectorError",
      "scoped_prefix": [
        "CommandConnector"
      ],
      "scoped_full_path": [
        "Foobara",
        "CommandConnector",
        "CommandConnectorError"
      ],
      "scoped_full_name": "Foobara::CommandConnector::CommandConnectorError",
      "scoped_category": "error",
      "reference": "Foobara::CommandConnector::CommandConnectorError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "organization",
        "Foobara"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "runtime",
      "symbol": "command_connector",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {}
      },
      "is_fatal": true,
      "error_class": "Foobara::CommandConnector::CommandConnectorError",
      "base_error": "Foobara::RuntimeError"
    },
    "Foobara::CommandConnector::UnauthenticatedError": {
      "scoped_path": [
        "CommandConnector",
        "UnauthenticatedError"
      ],
      "scoped_name": "CommandConnector::UnauthenticatedError",
      "scoped_short_name": "UnauthenticatedError",
      "scoped_prefix": [
        "CommandConnector"
      ],
      "scoped_full_path": [
        "Foobara",
        "CommandConnector",
        "UnauthenticatedError"
      ],
      "scoped_full_name": "Foobara::CommandConnector::UnauthenticatedError",
      "scoped_category": "error",
      "reference": "Foobara::CommandConnector::UnauthenticatedError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "organization",
        "Foobara"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "runtime",
      "symbol": "unauthenticated",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {}
      },
      "is_fatal": true,
      "error_class": "Foobara::CommandConnector::UnauthenticatedError",
      "base_error": "Foobara::CommandConnector::CommandConnectorError"
    },
    "Foobara::RuntimeError": {
      "scoped_path": [
        "RuntimeError"
      ],
      "scoped_name": "RuntimeError",
      "scoped_short_name": "RuntimeError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "Foobara",
        "RuntimeError"
      ],
      "scoped_full_name": "Foobara::RuntimeError",
      "scoped_category": "error",
      "reference": "Foobara::RuntimeError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "organization",
        "Foobara"
      ],
      "category": "runtime",
      "symbol": "runtime",
      "is_fatal": true,
      "error_class": "Foobara::RuntimeError",
      "abstract": true
    },
    "Foobara::Value::DataError": {
      "scoped_path": [
        "DataError"
      ],
      "scoped_name": "DataError",
      "scoped_short_name": "DataError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "Foobara",
        "Value",
        "DataError"
      ],
      "scoped_full_name": "Foobara::Value::DataError",
      "scoped_category": "error",
      "reference": "Foobara::Value::DataError",
      "domain": "Foobara::Value",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::Value"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "data",
      "symbol": "data",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "attribute_name": {
            "type": "symbol"
          },
          "value": {
            "type": "duck"
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::Value::DataError"
    },
    "Foobara::Value::Processor::Casting::CannotCastError": {
      "scoped_path": [
        "CannotCastError"
      ],
      "scoped_name": "CannotCastError",
      "scoped_short_name": "CannotCastError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "Foobara",
        "Value",
        "Processor",
        "Casting",
        "CannotCastError"
      ],
      "scoped_full_name": "Foobara::Value::Processor::Casting::CannotCastError",
      "scoped_category": "error",
      "reference": "Foobara::Value::Processor::Casting::CannotCastError",
      "domain": "Foobara::Value",
      "organization": "Foobara",
      "parent": [
        "processor_class",
        "Foobara::Value::Processor::Casting"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "data",
      "symbol": "cannot_cast",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "cast_to": {
            "type": "duck"
          },
          "value": {
            "type": "duck"
          },
          "attribute_name": {
            "type": "symbol"
          }
        }
      },
      "is_fatal": true,
      "error_class": "Foobara::Value::Processor::Casting::CannotCastError",
      "base_error": "Foobara::Value::DataError"
    },
    "array::SupportedValidators::Size::IncorrectTupleSizeError": {
      "scoped_path": [
        "IncorrectTupleSizeError"
      ],
      "scoped_name": "IncorrectTupleSizeError",
      "scoped_short_name": "IncorrectTupleSizeError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "array",
        "SupportedValidators",
        "Size",
        "IncorrectTupleSizeError"
      ],
      "scoped_full_name": "array::SupportedValidators::Size::IncorrectTupleSizeError",
      "scoped_category": "error",
      "reference": "array::SupportedValidators::Size::IncorrectTupleSizeError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "array::SupportedValidators::Size"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "integer",
        "symbol"
      ],
      "category": "data",
      "symbol": "incorrect_tuple_size",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "expected_size": {
            "type": "integer"
          },
          "actual_size": {
            "type": "integer"
          },
          "value": {
            "type": "array"
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::BuiltinTypes::Array::SupportedValidators::Size::IncorrectTupleSizeError",
      "base_error": "Foobara::Value::DataError"
    },
    "attributes::SupportedProcessors::ElementTypeDeclarations::UnexpectedAttributesError": {
      "scoped_path": [
        "UnexpectedAttributesError"
      ],
      "scoped_name": "UnexpectedAttributesError",
      "scoped_short_name": "UnexpectedAttributesError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "attributes",
        "SupportedProcessors",
        "ElementTypeDeclarations",
        "UnexpectedAttributesError"
      ],
      "scoped_full_name": "attributes::SupportedProcessors::ElementTypeDeclarations::UnexpectedAttributesError",
      "scoped_category": "error",
      "reference": "attributes::SupportedProcessors::ElementTypeDeclarations::UnexpectedAttributesError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "attributes::SupportedProcessors::ElementTypeDeclarations"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "data",
      "symbol": "unexpected_attributes",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "unexpected_attributes": {
            "type": "array",
            "element_type_declaration": {
              "type": "symbol"
            }
          },
          "allowed_attributes": {
            "type": "array",
            "element_type_declaration": {
              "type": "symbol"
            }
          }
        }
      },
      "is_fatal": true,
      "error_class": "Foobara::BuiltinTypes::Attributes::SupportedProcessors::ElementTypeDeclarations::UnexpectedAttributesError",
      "base_error": "Foobara::Value::DataError"
    },
    "attributes::SupportedValidators::Required::MissingRequiredAttributeError": {
      "scoped_path": [
        "MissingRequiredAttributeError"
      ],
      "scoped_name": "MissingRequiredAttributeError",
      "scoped_short_name": "MissingRequiredAttributeError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "attributes",
        "SupportedValidators",
        "Required",
        "MissingRequiredAttributeError"
      ],
      "scoped_full_name": "attributes::SupportedValidators::Required::MissingRequiredAttributeError",
      "scoped_category": "error",
      "reference": "attributes::SupportedValidators::Required::MissingRequiredAttributeError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "attributes::SupportedValidators::Required"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "data",
      "symbol": "missing_required_attribute",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "attribute_name": {
            "type": "symbol"
          }
        }
      },
      "is_fatal": true,
      "error_class": "Foobara::BuiltinTypes::Attributes::SupportedValidators::Required::MissingRequiredAttributeError",
      "base_error": "Foobara::Value::DataError"
    },
    "duck::SupportedValidators::InstanceOf::NotInstanceOfError": {
      "scoped_path": [
        "NotInstanceOfError"
      ],
      "scoped_name": "NotInstanceOfError",
      "scoped_short_name": "NotInstanceOfError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "duck",
        "SupportedValidators",
        "InstanceOf",
        "NotInstanceOfError"
      ],
      "scoped_full_name": "duck::SupportedValidators::InstanceOf::NotInstanceOfError",
      "scoped_category": "error",
      "reference": "duck::SupportedValidators::InstanceOf::NotInstanceOfError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "duck::SupportedValidators::InstanceOf"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "string",
        "symbol"
      ],
      "category": "data",
      "symbol": "not_instance_of",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "value": {
            "type": "duck"
          },
          "expected_class_name": {
            "type": "string"
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::BuiltinTypes::Duck::SupportedValidators::InstanceOf::NotInstanceOfError",
      "base_error": "Foobara::Value::DataError"
    },
    "duck::SupportedValidators::OneOf::ValueNotValidError": {
      "scoped_path": [
        "ValueNotValidError"
      ],
      "scoped_name": "ValueNotValidError",
      "scoped_short_name": "ValueNotValidError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "duck",
        "SupportedValidators",
        "OneOf",
        "ValueNotValidError"
      ],
      "scoped_full_name": "duck::SupportedValidators::OneOf::ValueNotValidError",
      "scoped_category": "error",
      "reference": "duck::SupportedValidators::OneOf::ValueNotValidError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "duck::SupportedValidators::OneOf"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "data",
      "symbol": "value_not_valid",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "value": {
            "type": "duck"
          },
          "valid_values": {
            "type": "array",
            "element_type_declaration": {
              "type": "duck"
            }
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::BuiltinTypes::Duck::SupportedValidators::OneOf::ValueNotValidError",
      "base_error": "Foobara::Value::DataError"
    },
    "email::Validators::CannotExceed64Characters::CannotExceed64CharactersError": {
      "scoped_path": [
        "CannotExceed64CharactersError"
      ],
      "scoped_name": "CannotExceed64CharactersError",
      "scoped_short_name": "CannotExceed64CharactersError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "email",
        "Validators",
        "CannotExceed64Characters",
        "CannotExceed64CharactersError"
      ],
      "scoped_full_name": "email::Validators::CannotExceed64Characters::CannotExceed64CharactersError",
      "scoped_category": "error",
      "reference": "email::Validators::CannotExceed64Characters::CannotExceed64CharactersError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "email::Validators::CannotExceed64Characters"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "data",
      "symbol": "cannot_exceed64_characters",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "value": {
            "type": "duck"
          },
          "regex": {
            "type": "duck"
          },
          "negate_regex": {
            "type": "duck"
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::BuiltinTypes::Email::Validators::CannotExceed64Characters::CannotExceed64CharactersError",
      "base_error": "Foobara::Value::DataError"
    },
    "email::Validators::CannotHaveMultipleAtSigns::CannotHaveMultipleAtSignsError": {
      "scoped_path": [
        "CannotHaveMultipleAtSignsError"
      ],
      "scoped_name": "CannotHaveMultipleAtSignsError",
      "scoped_short_name": "CannotHaveMultipleAtSignsError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "email",
        "Validators",
        "CannotHaveMultipleAtSigns",
        "CannotHaveMultipleAtSignsError"
      ],
      "scoped_full_name": "email::Validators::CannotHaveMultipleAtSigns::CannotHaveMultipleAtSignsError",
      "scoped_category": "error",
      "reference": "email::Validators::CannotHaveMultipleAtSigns::CannotHaveMultipleAtSignsError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "email::Validators::CannotHaveMultipleAtSigns"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "data",
      "symbol": "cannot_have_multiple_at_signs",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "value": {
            "type": "duck"
          },
          "regex": {
            "type": "duck"
          },
          "negate_regex": {
            "type": "duck"
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::BuiltinTypes::Email::Validators::CannotHaveMultipleAtSigns::CannotHaveMultipleAtSignsError",
      "base_error": "Foobara::Value::DataError"
    },
    "email::Validators::DomainCannotStartWithOrEndWithAHyphen::DomainCannotStartWithOrEndWithAHyphenError": {
      "scoped_path": [
        "DomainCannotStartWithOrEndWithAHyphenError"
      ],
      "scoped_name": "DomainCannotStartWithOrEndWithAHyphenError",
      "scoped_short_name": "DomainCannotStartWithOrEndWithAHyphenError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "email",
        "Validators",
        "DomainCannotStartWithOrEndWithAHyphen",
        "DomainCannotStartWithOrEndWithAHyphenError"
      ],
      "scoped_full_name": "email::Validators::DomainCannotStartWithOrEndWithAHyphen::DomainCannotStartWithOrEndWithAHyphenError",
      "scoped_category": "error",
      "reference": "email::Validators::DomainCannotStartWithOrEndWithAHyphen::DomainCannotStartWithOrEndWithAHyphenError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "email::Validators::DomainCannotStartWithOrEndWithAHyphen"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "data",
      "symbol": "domain_cannot_start_with_or_end_with_a_hyphen",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "value": {
            "type": "duck"
          },
          "regex": {
            "type": "duck"
          },
          "negate_regex": {
            "type": "duck"
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::BuiltinTypes::Email::Validators::DomainCannotStartWithOrEndWithAHyphen::DomainCannotStartWithOrEndWithAHyphenError",
      "base_error": "Foobara::Value::DataError"
    },
    "email::Validators::FirstPartCannotBeEmpty::FirstPartCannotBeEmptyError": {
      "scoped_path": [
        "FirstPartCannotBeEmptyError"
      ],
      "scoped_name": "FirstPartCannotBeEmptyError",
      "scoped_short_name": "FirstPartCannotBeEmptyError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "email",
        "Validators",
        "FirstPartCannotBeEmpty",
        "FirstPartCannotBeEmptyError"
      ],
      "scoped_full_name": "email::Validators::FirstPartCannotBeEmpty::FirstPartCannotBeEmptyError",
      "scoped_category": "error",
      "reference": "email::Validators::FirstPartCannotBeEmpty::FirstPartCannotBeEmptyError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "email::Validators::FirstPartCannotBeEmpty"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "data",
      "symbol": "first_part_cannot_be_empty",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "value": {
            "type": "duck"
          },
          "regex": {
            "type": "duck"
          },
          "negate_regex": {
            "type": "duck"
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::BuiltinTypes::Email::Validators::FirstPartCannotBeEmpty::FirstPartCannotBeEmptyError",
      "base_error": "Foobara::Value::DataError"
    },
    "email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARowError": {
      "scoped_path": [
        "FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARowError"
      ],
      "scoped_name": "FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARowError",
      "scoped_short_name": "FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARowError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "email",
        "Validators",
        "FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow",
        "FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARowError"
      ],
      "scoped_full_name": "email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARowError",
      "scoped_category": "error",
      "reference": "email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARowError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "data",
      "symbol": "first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "value": {
            "type": "duck"
          },
          "regex": {
            "type": "duck"
          },
          "negate_regex": {
            "type": "duck"
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::BuiltinTypes::Email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARowError",
      "base_error": "Foobara::Value::DataError"
    },
    "email::Validators::FirstPartHasBadCharacters::FirstPartHasBadCharactersError": {
      "scoped_path": [
        "FirstPartHasBadCharactersError"
      ],
      "scoped_name": "FirstPartHasBadCharactersError",
      "scoped_short_name": "FirstPartHasBadCharactersError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "email",
        "Validators",
        "FirstPartHasBadCharacters",
        "FirstPartHasBadCharactersError"
      ],
      "scoped_full_name": "email::Validators::FirstPartHasBadCharacters::FirstPartHasBadCharactersError",
      "scoped_category": "error",
      "reference": "email::Validators::FirstPartHasBadCharacters::FirstPartHasBadCharactersError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "email::Validators::FirstPartHasBadCharacters"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "data",
      "symbol": "first_part_has_bad_characters",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "value": {
            "type": "duck"
          },
          "regex": {
            "type": "duck"
          },
          "negate_regex": {
            "type": "duck"
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::BuiltinTypes::Email::Validators::FirstPartHasBadCharacters::FirstPartHasBadCharactersError",
      "base_error": "Foobara::Value::DataError"
    },
    "email::Validators::MustHaveAnAtSign::MustHaveAnAtSignError": {
      "scoped_path": [
        "MustHaveAnAtSignError"
      ],
      "scoped_name": "MustHaveAnAtSignError",
      "scoped_short_name": "MustHaveAnAtSignError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "email",
        "Validators",
        "MustHaveAnAtSign",
        "MustHaveAnAtSignError"
      ],
      "scoped_full_name": "email::Validators::MustHaveAnAtSign::MustHaveAnAtSignError",
      "scoped_category": "error",
      "reference": "email::Validators::MustHaveAnAtSign::MustHaveAnAtSignError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "email::Validators::MustHaveAnAtSign"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "data",
      "symbol": "must_have_an_at_sign",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "value": {
            "type": "duck"
          },
          "regex": {
            "type": "duck"
          },
          "negate_regex": {
            "type": "duck"
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::BuiltinTypes::Email::Validators::MustHaveAnAtSign::MustHaveAnAtSignError",
      "base_error": "Foobara::Value::DataError"
    },
    "email::Validators::SecondPartCannotBeEmpty::SecondPartCannotBeEmptyError": {
      "scoped_path": [
        "SecondPartCannotBeEmptyError"
      ],
      "scoped_name": "SecondPartCannotBeEmptyError",
      "scoped_short_name": "SecondPartCannotBeEmptyError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "email",
        "Validators",
        "SecondPartCannotBeEmpty",
        "SecondPartCannotBeEmptyError"
      ],
      "scoped_full_name": "email::Validators::SecondPartCannotBeEmpty::SecondPartCannotBeEmptyError",
      "scoped_category": "error",
      "reference": "email::Validators::SecondPartCannotBeEmpty::SecondPartCannotBeEmptyError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "email::Validators::SecondPartCannotBeEmpty"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "data",
      "symbol": "second_part_cannot_be_empty",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "value": {
            "type": "duck"
          },
          "regex": {
            "type": "duck"
          },
          "negate_regex": {
            "type": "duck"
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::BuiltinTypes::Email::Validators::SecondPartCannotBeEmpty::SecondPartCannotBeEmptyError",
      "base_error": "Foobara::Value::DataError"
    },
    "email::Validators::SecondPartHasBadCharacters::SecondPartHasBadCharactersError": {
      "scoped_path": [
        "SecondPartHasBadCharactersError"
      ],
      "scoped_name": "SecondPartHasBadCharactersError",
      "scoped_short_name": "SecondPartHasBadCharactersError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "email",
        "Validators",
        "SecondPartHasBadCharacters",
        "SecondPartHasBadCharactersError"
      ],
      "scoped_full_name": "email::Validators::SecondPartHasBadCharacters::SecondPartHasBadCharactersError",
      "scoped_category": "error",
      "reference": "email::Validators::SecondPartHasBadCharacters::SecondPartHasBadCharactersError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "email::Validators::SecondPartHasBadCharacters"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "category": "data",
      "symbol": "second_part_has_bad_characters",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "value": {
            "type": "duck"
          },
          "regex": {
            "type": "duck"
          },
          "negate_regex": {
            "type": "duck"
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::BuiltinTypes::Email::Validators::SecondPartHasBadCharacters::SecondPartHasBadCharactersError",
      "base_error": "Foobara::Value::DataError"
    },
    "number::SupportedValidators::Max::MaxExceededError": {
      "scoped_path": [
        "MaxExceededError"
      ],
      "scoped_name": "MaxExceededError",
      "scoped_short_name": "MaxExceededError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "number",
        "SupportedValidators",
        "Max",
        "MaxExceededError"
      ],
      "scoped_full_name": "number::SupportedValidators::Max::MaxExceededError",
      "scoped_category": "error",
      "reference": "number::SupportedValidators::Max::MaxExceededError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "number::SupportedValidators::Max"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "number",
        "symbol"
      ],
      "category": "data",
      "symbol": "max_exceeded",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "value": {
            "type": "number"
          },
          "max": {
            "type": "number"
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::BuiltinTypes::Number::SupportedValidators::Max::MaxExceededError",
      "base_error": "Foobara::Value::DataError"
    },
    "number::SupportedValidators::Min::BelowMinimumError": {
      "scoped_path": [
        "BelowMinimumError"
      ],
      "scoped_name": "BelowMinimumError",
      "scoped_short_name": "BelowMinimumError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "number",
        "SupportedValidators",
        "Min",
        "BelowMinimumError"
      ],
      "scoped_full_name": "number::SupportedValidators::Min::BelowMinimumError",
      "scoped_category": "error",
      "reference": "number::SupportedValidators::Min::BelowMinimumError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "number::SupportedValidators::Min"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "number",
        "symbol"
      ],
      "category": "data",
      "symbol": "below_minimum",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "value": {
            "type": "number"
          },
          "min": {
            "type": "number"
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::BuiltinTypes::Number::SupportedValidators::Min::BelowMinimumError",
      "base_error": "Foobara::Value::DataError"
    },
    "string::SupportedValidators::Matches::DoesNotMatchError": {
      "scoped_path": [
        "DoesNotMatchError"
      ],
      "scoped_name": "DoesNotMatchError",
      "scoped_short_name": "DoesNotMatchError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "string",
        "SupportedValidators",
        "Matches",
        "DoesNotMatchError"
      ],
      "scoped_full_name": "string::SupportedValidators::Matches::DoesNotMatchError",
      "scoped_category": "error",
      "reference": "string::SupportedValidators::Matches::DoesNotMatchError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "string::SupportedValidators::Matches"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "string",
        "symbol"
      ],
      "category": "data",
      "symbol": "does_not_match",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "value": {
            "type": "string"
          },
          "regex": {
            "type": "duck"
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::BuiltinTypes::String::SupportedValidators::Matches::DoesNotMatchError",
      "base_error": "Foobara::Value::DataError"
    },
    "string::SupportedValidators::MaxLength::MaxLengthExceededError": {
      "scoped_path": [
        "MaxLengthExceededError"
      ],
      "scoped_name": "MaxLengthExceededError",
      "scoped_short_name": "MaxLengthExceededError",
      "scoped_prefix": null,
      "scoped_full_path": [
        "string",
        "SupportedValidators",
        "MaxLength",
        "MaxLengthExceededError"
      ],
      "scoped_full_name": "string::SupportedValidators::MaxLength::MaxLengthExceededError",
      "scoped_category": "error",
      "reference": "string::SupportedValidators::MaxLength::MaxLengthExceededError",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "processor_class",
        "string::SupportedValidators::MaxLength"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "integer",
        "string",
        "symbol"
      ],
      "category": "data",
      "symbol": "max_length_exceeded",
      "context_type_declaration": {
        "type": "attributes",
        "element_type_declarations": {
          "value": {
            "type": "string"
          },
          "max_length": {
            "type": "integer"
          }
        }
      },
      "is_fatal": false,
      "error_class": "Foobara::BuiltinTypes::String::SupportedValidators::MaxLength::MaxLengthExceededError",
      "base_error": "Foobara::Value::DataError"
    }
  },
  "organization": {
    "Foobara": {
      "scoped_path": [
        "Foobara"
      ],
      "scoped_name": "Foobara",
      "scoped_short_name": "Foobara",
      "scoped_prefix": null,
      "scoped_full_path": [
        "Foobara"
      ],
      "scoped_full_name": "Foobara",
      "scoped_category": "organization",
      "reference": "Foobara",
      "domain": "global_organization::global_domain",
      "organization": "Foobara",
      "domains": [
        "Foobara::Auth"
      ]
    },
    "global_organization": {
      "scoped_path": [],
      "scoped_name": null,
      "scoped_short_name": null,
      "scoped_prefix": [],
      "scoped_full_path": [],
      "scoped_full_name": "",
      "scoped_category": "organization",
      "reference": "global_organization",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "domains": [
        "global_organization::global_domain"
      ]
    }
  },
  "processor": {
    "array::Casters::arrayable": {
      "scoped_path": [
        "Casters",
        "arrayable"
      ],
      "scoped_name": "Casters::arrayable",
      "scoped_short_name": "arrayable",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "array",
        "Casters",
        "arrayable"
      ],
      "scoped_full_name": "array::Casters::arrayable",
      "scoped_category": "processor",
      "reference": "array::Casters::arrayable",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "array"
      ],
      "processor_class": "array::Casters::Arrayable"
    },
    "associative_array::Casters::array": {
      "scoped_path": [
        "Casters",
        "array"
      ],
      "scoped_name": "Casters::array",
      "scoped_short_name": "array",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "associative_array",
        "Casters",
        "array"
      ],
      "scoped_full_name": "associative_array::Casters::array",
      "scoped_category": "processor",
      "reference": "associative_array::Casters::array",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "associative_array"
      ],
      "processor_class": "associative_array::Casters::Array"
    },
    "attributes::Casters::array": {
      "scoped_path": [
        "Casters",
        "array"
      ],
      "scoped_name": "Casters::array",
      "scoped_short_name": "array",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "attributes",
        "Casters",
        "array"
      ],
      "scoped_full_name": "attributes::Casters::array",
      "scoped_category": "processor",
      "reference": "attributes::Casters::array",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "attributes"
      ],
      "processor_class": "attributes::Casters::Array"
    },
    "attributes::Casters::hash": {
      "scoped_path": [
        "Casters",
        "hash"
      ],
      "scoped_name": "Casters::hash",
      "scoped_short_name": "hash",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "attributes",
        "Casters",
        "hash"
      ],
      "scoped_full_name": "attributes::Casters::hash",
      "scoped_category": "processor",
      "reference": "attributes::Casters::hash",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "attributes"
      ],
      "processor_class": "attributes::Casters::Hash"
    },
    "datetime::Casters::date": {
      "scoped_path": [
        "Casters",
        "date"
      ],
      "scoped_name": "Casters::date",
      "scoped_short_name": "date",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "datetime",
        "Casters",
        "date"
      ],
      "scoped_full_name": "datetime::Casters::date",
      "scoped_category": "processor",
      "reference": "datetime::Casters::date",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "datetime"
      ],
      "processor_class": "datetime::Casters::Date"
    },
    "datetime::Casters::hash": {
      "scoped_path": [
        "Casters",
        "hash"
      ],
      "scoped_name": "Casters::hash",
      "scoped_short_name": "hash",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "datetime",
        "Casters",
        "hash"
      ],
      "scoped_full_name": "datetime::Casters::hash",
      "scoped_category": "processor",
      "reference": "datetime::Casters::hash",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "datetime"
      ],
      "processor_class": "datetime::Casters::Hash"
    },
    "datetime::Casters::seconds_since_epoch": {
      "scoped_path": [
        "Casters",
        "seconds_since_epoch"
      ],
      "scoped_name": "Casters::seconds_since_epoch",
      "scoped_short_name": "seconds_since_epoch",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "datetime",
        "Casters",
        "seconds_since_epoch"
      ],
      "scoped_full_name": "datetime::Casters::seconds_since_epoch",
      "scoped_category": "processor",
      "reference": "datetime::Casters::seconds_since_epoch",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "datetime"
      ],
      "processor_class": "datetime::Casters::SecondsSinceEpoch"
    },
    "datetime::Casters::string": {
      "scoped_path": [
        "Casters",
        "string"
      ],
      "scoped_name": "Casters::string",
      "scoped_short_name": "string",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "datetime",
        "Casters",
        "string"
      ],
      "scoped_full_name": "datetime::Casters::string",
      "scoped_category": "processor",
      "reference": "datetime::Casters::string",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "datetime"
      ],
      "processor_class": "datetime::Casters::String"
    },
    "email::Transformers::downcase": {
      "scoped_path": [
        "Transformers",
        "downcase"
      ],
      "scoped_name": "Transformers::downcase",
      "scoped_short_name": "downcase",
      "scoped_prefix": [
        "Transformers"
      ],
      "scoped_full_path": [
        "email",
        "Transformers",
        "downcase"
      ],
      "scoped_full_name": "email::Transformers::downcase",
      "scoped_category": "processor",
      "reference": "email::Transformers::downcase",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "processor_class": "email::Transformers::Downcase",
      "declaration_data": true
    },
    "email::Validators::cannot_exceed64_characters": {
      "scoped_path": [
        "Validators",
        "cannot_exceed64_characters"
      ],
      "scoped_name": "Validators::cannot_exceed64_characters",
      "scoped_short_name": "cannot_exceed64_characters",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "cannot_exceed64_characters"
      ],
      "scoped_full_name": "email::Validators::cannot_exceed64_characters",
      "scoped_category": "processor",
      "reference": "email::Validators::cannot_exceed64_characters",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "processor_class": "email::Validators::CannotExceed64Characters",
      "declaration_data": true,
      "possible_errors": {
        "data.cannot_exceed64_characters": {
          "category": "data",
          "symbol": "cannot_exceed64_characters",
          "key": "data.cannot_exceed64_characters",
          "error": "email::Validators::CannotExceed64Characters::CannotExceed64CharactersError",
          "processor": "email::Validators::cannot_exceed64_characters",
          "processor_class": "email::Validators::CannotExceed64Characters"
        }
      }
    },
    "email::Validators::cannot_have_multiple_at_signs": {
      "scoped_path": [
        "Validators",
        "cannot_have_multiple_at_signs"
      ],
      "scoped_name": "Validators::cannot_have_multiple_at_signs",
      "scoped_short_name": "cannot_have_multiple_at_signs",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "cannot_have_multiple_at_signs"
      ],
      "scoped_full_name": "email::Validators::cannot_have_multiple_at_signs",
      "scoped_category": "processor",
      "reference": "email::Validators::cannot_have_multiple_at_signs",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "processor_class": "email::Validators::CannotHaveMultipleAtSigns",
      "declaration_data": true,
      "possible_errors": {
        "data.cannot_have_multiple_at_signs": {
          "category": "data",
          "symbol": "cannot_have_multiple_at_signs",
          "key": "data.cannot_have_multiple_at_signs",
          "error": "email::Validators::CannotHaveMultipleAtSigns::CannotHaveMultipleAtSignsError",
          "processor": "email::Validators::cannot_have_multiple_at_signs",
          "processor_class": "email::Validators::CannotHaveMultipleAtSigns"
        }
      }
    },
    "email::Validators::domain_cannot_start_with_or_end_with_a_hyphen": {
      "scoped_path": [
        "Validators",
        "domain_cannot_start_with_or_end_with_a_hyphen"
      ],
      "scoped_name": "Validators::domain_cannot_start_with_or_end_with_a_hyphen",
      "scoped_short_name": "domain_cannot_start_with_or_end_with_a_hyphen",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "domain_cannot_start_with_or_end_with_a_hyphen"
      ],
      "scoped_full_name": "email::Validators::domain_cannot_start_with_or_end_with_a_hyphen",
      "scoped_category": "processor",
      "reference": "email::Validators::domain_cannot_start_with_or_end_with_a_hyphen",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "processor_class": "email::Validators::DomainCannotStartWithOrEndWithAHyphen",
      "declaration_data": true,
      "possible_errors": {
        "data.domain_cannot_start_with_or_end_with_a_hyphen": {
          "category": "data",
          "symbol": "domain_cannot_start_with_or_end_with_a_hyphen",
          "key": "data.domain_cannot_start_with_or_end_with_a_hyphen",
          "error": "email::Validators::DomainCannotStartWithOrEndWithAHyphen::DomainCannotStartWithOrEndWithAHyphenError",
          "processor": "email::Validators::domain_cannot_start_with_or_end_with_a_hyphen",
          "processor_class": "email::Validators::DomainCannotStartWithOrEndWithAHyphen"
        }
      }
    },
    "email::Validators::first_part_cannot_be_empty": {
      "scoped_path": [
        "Validators",
        "first_part_cannot_be_empty"
      ],
      "scoped_name": "Validators::first_part_cannot_be_empty",
      "scoped_short_name": "first_part_cannot_be_empty",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "first_part_cannot_be_empty"
      ],
      "scoped_full_name": "email::Validators::first_part_cannot_be_empty",
      "scoped_category": "processor",
      "reference": "email::Validators::first_part_cannot_be_empty",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "processor_class": "email::Validators::FirstPartCannotBeEmpty",
      "declaration_data": true,
      "possible_errors": {
        "data.first_part_cannot_be_empty": {
          "category": "data",
          "symbol": "first_part_cannot_be_empty",
          "key": "data.first_part_cannot_be_empty",
          "error": "email::Validators::FirstPartCannotBeEmpty::FirstPartCannotBeEmptyError",
          "processor": "email::Validators::first_part_cannot_be_empty",
          "processor_class": "email::Validators::FirstPartCannotBeEmpty"
        }
      }
    },
    "email::Validators::first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row": {
      "scoped_path": [
        "Validators",
        "first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row"
      ],
      "scoped_name": "Validators::first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row",
      "scoped_short_name": "first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row"
      ],
      "scoped_full_name": "email::Validators::first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row",
      "scoped_category": "processor",
      "reference": "email::Validators::first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "processor_class": "email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow",
      "declaration_data": true,
      "possible_errors": {
        "data.first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row": {
          "category": "data",
          "symbol": "first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row",
          "key": "data.first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row",
          "error": "email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARowError",
          "processor": "email::Validators::first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row",
          "processor_class": "email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow"
        }
      }
    },
    "email::Validators::first_part_has_bad_characters": {
      "scoped_path": [
        "Validators",
        "first_part_has_bad_characters"
      ],
      "scoped_name": "Validators::first_part_has_bad_characters",
      "scoped_short_name": "first_part_has_bad_characters",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "first_part_has_bad_characters"
      ],
      "scoped_full_name": "email::Validators::first_part_has_bad_characters",
      "scoped_category": "processor",
      "reference": "email::Validators::first_part_has_bad_characters",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "processor_class": "email::Validators::FirstPartHasBadCharacters",
      "declaration_data": true,
      "possible_errors": {
        "data.first_part_has_bad_characters": {
          "category": "data",
          "symbol": "first_part_has_bad_characters",
          "key": "data.first_part_has_bad_characters",
          "error": "email::Validators::FirstPartHasBadCharacters::FirstPartHasBadCharactersError",
          "processor": "email::Validators::first_part_has_bad_characters",
          "processor_class": "email::Validators::FirstPartHasBadCharacters"
        }
      }
    },
    "email::Validators::must_have_an_at_sign": {
      "scoped_path": [
        "Validators",
        "must_have_an_at_sign"
      ],
      "scoped_name": "Validators::must_have_an_at_sign",
      "scoped_short_name": "must_have_an_at_sign",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "must_have_an_at_sign"
      ],
      "scoped_full_name": "email::Validators::must_have_an_at_sign",
      "scoped_category": "processor",
      "reference": "email::Validators::must_have_an_at_sign",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "processor_class": "email::Validators::MustHaveAnAtSign",
      "declaration_data": true,
      "possible_errors": {
        "data.must_have_an_at_sign": {
          "category": "data",
          "symbol": "must_have_an_at_sign",
          "key": "data.must_have_an_at_sign",
          "error": "email::Validators::MustHaveAnAtSign::MustHaveAnAtSignError",
          "processor": "email::Validators::must_have_an_at_sign",
          "processor_class": "email::Validators::MustHaveAnAtSign"
        }
      }
    },
    "email::Validators::second_part_cannot_be_empty": {
      "scoped_path": [
        "Validators",
        "second_part_cannot_be_empty"
      ],
      "scoped_name": "Validators::second_part_cannot_be_empty",
      "scoped_short_name": "second_part_cannot_be_empty",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "second_part_cannot_be_empty"
      ],
      "scoped_full_name": "email::Validators::second_part_cannot_be_empty",
      "scoped_category": "processor",
      "reference": "email::Validators::second_part_cannot_be_empty",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "processor_class": "email::Validators::SecondPartCannotBeEmpty",
      "declaration_data": true,
      "possible_errors": {
        "data.second_part_cannot_be_empty": {
          "category": "data",
          "symbol": "second_part_cannot_be_empty",
          "key": "data.second_part_cannot_be_empty",
          "error": "email::Validators::SecondPartCannotBeEmpty::SecondPartCannotBeEmptyError",
          "processor": "email::Validators::second_part_cannot_be_empty",
          "processor_class": "email::Validators::SecondPartCannotBeEmpty"
        }
      }
    },
    "email::Validators::second_part_has_bad_characters": {
      "scoped_path": [
        "Validators",
        "second_part_has_bad_characters"
      ],
      "scoped_name": "Validators::second_part_has_bad_characters",
      "scoped_short_name": "second_part_has_bad_characters",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "second_part_has_bad_characters"
      ],
      "scoped_full_name": "email::Validators::second_part_has_bad_characters",
      "scoped_category": "processor",
      "reference": "email::Validators::second_part_has_bad_characters",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "processor_class": "email::Validators::SecondPartHasBadCharacters",
      "declaration_data": true,
      "possible_errors": {
        "data.second_part_has_bad_characters": {
          "category": "data",
          "symbol": "second_part_has_bad_characters",
          "key": "data.second_part_has_bad_characters",
          "error": "email::Validators::SecondPartHasBadCharacters::SecondPartHasBadCharactersError",
          "processor": "email::Validators::second_part_has_bad_characters",
          "processor_class": "email::Validators::SecondPartHasBadCharacters"
        }
      }
    },
    "integer::Casters::string": {
      "scoped_path": [
        "Casters",
        "string"
      ],
      "scoped_name": "Casters::string",
      "scoped_short_name": "string",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "integer",
        "Casters",
        "string"
      ],
      "scoped_full_name": "integer::Casters::string",
      "scoped_category": "processor",
      "reference": "integer::Casters::string",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "integer"
      ],
      "processor_class": "integer::Casters::String"
    },
    "string::Casters::numeric": {
      "scoped_path": [
        "Casters",
        "numeric"
      ],
      "scoped_name": "Casters::numeric",
      "scoped_short_name": "numeric",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "string",
        "Casters",
        "numeric"
      ],
      "scoped_full_name": "string::Casters::numeric",
      "scoped_category": "processor",
      "reference": "string::Casters::numeric",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "string"
      ],
      "processor_class": "string::Casters::Numeric"
    },
    "string::Casters::symbol": {
      "scoped_path": [
        "Casters",
        "symbol"
      ],
      "scoped_name": "Casters::symbol",
      "scoped_short_name": "symbol",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "string",
        "Casters",
        "symbol"
      ],
      "scoped_full_name": "string::Casters::symbol",
      "scoped_category": "processor",
      "reference": "string::Casters::symbol",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "string"
      ],
      "processor_class": "string::Casters::Symbol"
    },
    "symbol::Casters::string": {
      "scoped_path": [
        "Casters",
        "string"
      ],
      "scoped_name": "Casters::string",
      "scoped_short_name": "string",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "symbol",
        "Casters",
        "string"
      ],
      "scoped_full_name": "symbol::Casters::string",
      "scoped_category": "processor",
      "reference": "symbol::Casters::string",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "symbol"
      ],
      "processor_class": "symbol::Casters::String"
    }
  },
  "processor_class": {
    "Foobara::CommandConnectors::Serializers::AtomicSerializer": {
      "scoped_path": [
        "Serializers",
        "AtomicSerializer"
      ],
      "scoped_name": "Serializers::AtomicSerializer",
      "scoped_short_name": "AtomicSerializer",
      "scoped_prefix": [
        "Serializers"
      ],
      "scoped_full_path": [
        "Foobara",
        "CommandConnectors",
        "Serializers",
        "AtomicSerializer"
      ],
      "scoped_full_name": "Foobara::CommandConnectors::Serializers::AtomicSerializer",
      "scoped_category": "processor_class",
      "reference": "Foobara::CommandConnectors::Serializers::AtomicSerializer",
      "domain": "Foobara::CommandConnectors",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::CommandConnectors"
      ],
      "name": "Foobara::CommandConnectors::Serializers::AtomicSerializer",
      "processor_type": "transformer"
    },
    "Foobara::CommandConnectors::Serializers::ErrorsSerializer": {
      "scoped_path": [
        "Serializers",
        "ErrorsSerializer"
      ],
      "scoped_name": "Serializers::ErrorsSerializer",
      "scoped_short_name": "ErrorsSerializer",
      "scoped_prefix": [
        "Serializers"
      ],
      "scoped_full_path": [
        "Foobara",
        "CommandConnectors",
        "Serializers",
        "ErrorsSerializer"
      ],
      "scoped_full_name": "Foobara::CommandConnectors::Serializers::ErrorsSerializer",
      "scoped_category": "processor_class",
      "reference": "Foobara::CommandConnectors::Serializers::ErrorsSerializer",
      "domain": "Foobara::CommandConnectors",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::CommandConnectors"
      ],
      "name": "Foobara::CommandConnectors::Serializers::ErrorsSerializer",
      "processor_type": "transformer"
    },
    "Foobara::CommandConnectors::Serializers::JsonSerializer": {
      "scoped_path": [
        "Serializers",
        "JsonSerializer"
      ],
      "scoped_name": "Serializers::JsonSerializer",
      "scoped_short_name": "JsonSerializer",
      "scoped_prefix": [
        "Serializers"
      ],
      "scoped_full_path": [
        "Foobara",
        "CommandConnectors",
        "Serializers",
        "JsonSerializer"
      ],
      "scoped_full_name": "Foobara::CommandConnectors::Serializers::JsonSerializer",
      "scoped_category": "processor_class",
      "reference": "Foobara::CommandConnectors::Serializers::JsonSerializer",
      "domain": "Foobara::CommandConnectors",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::CommandConnectors"
      ],
      "name": "Foobara::CommandConnectors::Serializers::JsonSerializer",
      "processor_type": "transformer"
    },
    "Foobara::Entity::SensitiveValueRemovers::Entity": {
      "scoped_path": [
        "Entity",
        "SensitiveValueRemovers",
        "Entity"
      ],
      "scoped_name": "Entity::SensitiveValueRemovers::Entity",
      "scoped_short_name": "Entity",
      "scoped_prefix": [
        "Entity",
        "SensitiveValueRemovers"
      ],
      "scoped_full_path": [
        "Foobara",
        "Entity",
        "SensitiveValueRemovers",
        "Entity"
      ],
      "scoped_full_name": "Foobara::Entity::SensitiveValueRemovers::Entity",
      "scoped_category": "processor_class",
      "reference": "Foobara::Entity::SensitiveValueRemovers::Entity",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "organization",
        "Foobara"
      ],
      "name": "Foobara::Entity::SensitiveValueRemovers::Entity",
      "processor_type": "transformer"
    },
    "Foobara::Value::Processor::Casting": {
      "scoped_path": [
        "Processor",
        "Casting"
      ],
      "scoped_name": "Processor::Casting",
      "scoped_short_name": "Casting",
      "scoped_prefix": [
        "Processor"
      ],
      "scoped_full_path": [
        "Foobara",
        "Value",
        "Processor",
        "Casting"
      ],
      "scoped_full_name": "Foobara::Value::Processor::Casting",
      "scoped_category": "processor_class",
      "reference": "Foobara::Value::Processor::Casting",
      "domain": "Foobara::Value",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::Value"
      ],
      "name": "Foobara::Value::Processor::Casting",
      "processor_type": "casting",
      "error_classes": [
        "Foobara::Value::Processor::Casting::CannotCastError"
      ]
    },
    "Foobara::Value::Processor::Pipeline": {
      "scoped_path": [
        "Processor",
        "Pipeline"
      ],
      "scoped_name": "Processor::Pipeline",
      "scoped_short_name": "Pipeline",
      "scoped_prefix": [
        "Processor"
      ],
      "scoped_full_path": [
        "Foobara",
        "Value",
        "Processor",
        "Pipeline"
      ],
      "scoped_full_name": "Foobara::Value::Processor::Pipeline",
      "scoped_category": "processor_class",
      "reference": "Foobara::Value::Processor::Pipeline",
      "domain": "Foobara::Value",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::Value"
      ],
      "name": "Foobara::Value::Processor::Pipeline",
      "processor_type": "pipeline"
    },
    "array::Casters::Arrayable": {
      "scoped_path": [
        "Casters",
        "Arrayable"
      ],
      "scoped_name": "Casters::Arrayable",
      "scoped_short_name": "Arrayable",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "array",
        "Casters",
        "Arrayable"
      ],
      "scoped_full_name": "array::Casters::Arrayable",
      "scoped_category": "processor_class",
      "reference": "array::Casters::Arrayable",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "array"
      ],
      "name": "Foobara::BuiltinTypes::Array::Casters::Arrayable",
      "processor_type": "caster"
    },
    "array::SupportedProcessors::ElementTypeDeclaration": {
      "scoped_path": [
        "SupportedProcessors",
        "ElementTypeDeclaration"
      ],
      "scoped_name": "SupportedProcessors::ElementTypeDeclaration",
      "scoped_short_name": "ElementTypeDeclaration",
      "scoped_prefix": [
        "SupportedProcessors"
      ],
      "scoped_full_path": [
        "array",
        "SupportedProcessors",
        "ElementTypeDeclaration"
      ],
      "scoped_full_name": "array::SupportedProcessors::ElementTypeDeclaration",
      "scoped_category": "processor_class",
      "reference": "array::SupportedProcessors::ElementTypeDeclaration",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "array"
      ],
      "name": "Foobara::BuiltinTypes::Array::SupportedProcessors::ElementTypeDeclaration",
      "processor_type": "processor"
    },
    "array::SupportedValidators::Size": {
      "scoped_path": [
        "SupportedValidators",
        "Size"
      ],
      "scoped_name": "SupportedValidators::Size",
      "scoped_short_name": "Size",
      "scoped_prefix": [
        "SupportedValidators"
      ],
      "scoped_full_path": [
        "array",
        "SupportedValidators",
        "Size"
      ],
      "scoped_full_name": "array::SupportedValidators::Size",
      "scoped_category": "processor_class",
      "reference": "array::SupportedValidators::Size",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "array"
      ],
      "name": "Foobara::BuiltinTypes::Array::SupportedValidators::Size",
      "processor_type": "transformer",
      "error_classes": [
        "array::SupportedValidators::Size::IncorrectTupleSizeError"
      ]
    },
    "associative_array::Casters::Array": {
      "scoped_path": [
        "Casters",
        "Array"
      ],
      "scoped_name": "Casters::Array",
      "scoped_short_name": "Array",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "associative_array",
        "Casters",
        "Array"
      ],
      "scoped_full_name": "associative_array::Casters::Array",
      "scoped_category": "processor_class",
      "reference": "associative_array::Casters::Array",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "associative_array"
      ],
      "name": "Foobara::BuiltinTypes::AssociativeArray::Casters::Array",
      "processor_type": "caster"
    },
    "associative_array::SupportedProcessors::KeyTypeDeclaration": {
      "scoped_path": [
        "SupportedProcessors",
        "KeyTypeDeclaration"
      ],
      "scoped_name": "SupportedProcessors::KeyTypeDeclaration",
      "scoped_short_name": "KeyTypeDeclaration",
      "scoped_prefix": [
        "SupportedProcessors"
      ],
      "scoped_full_path": [
        "associative_array",
        "SupportedProcessors",
        "KeyTypeDeclaration"
      ],
      "scoped_full_name": "associative_array::SupportedProcessors::KeyTypeDeclaration",
      "scoped_category": "processor_class",
      "reference": "associative_array::SupportedProcessors::KeyTypeDeclaration",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "associative_array"
      ],
      "name": "Foobara::BuiltinTypes::AssociativeArray::SupportedProcessors::KeyTypeDeclaration",
      "processor_type": "processor"
    },
    "associative_array::SupportedProcessors::ValueTypeDeclaration": {
      "scoped_path": [
        "SupportedProcessors",
        "ValueTypeDeclaration"
      ],
      "scoped_name": "SupportedProcessors::ValueTypeDeclaration",
      "scoped_short_name": "ValueTypeDeclaration",
      "scoped_prefix": [
        "SupportedProcessors"
      ],
      "scoped_full_path": [
        "associative_array",
        "SupportedProcessors",
        "ValueTypeDeclaration"
      ],
      "scoped_full_name": "associative_array::SupportedProcessors::ValueTypeDeclaration",
      "scoped_category": "processor_class",
      "reference": "associative_array::SupportedProcessors::ValueTypeDeclaration",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "associative_array"
      ],
      "name": "Foobara::BuiltinTypes::AssociativeArray::SupportedProcessors::ValueTypeDeclaration",
      "processor_type": "processor"
    },
    "attributes::Casters::Array": {
      "scoped_path": [
        "Casters",
        "Array"
      ],
      "scoped_name": "Casters::Array",
      "scoped_short_name": "Array",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "attributes",
        "Casters",
        "Array"
      ],
      "scoped_full_name": "attributes::Casters::Array",
      "scoped_category": "processor_class",
      "reference": "attributes::Casters::Array",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "attributes"
      ],
      "name": "Foobara::BuiltinTypes::Attributes::Casters::Array",
      "processor_type": "caster"
    },
    "attributes::Casters::Hash": {
      "scoped_path": [
        "Casters",
        "Hash"
      ],
      "scoped_name": "Casters::Hash",
      "scoped_short_name": "Hash",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "attributes",
        "Casters",
        "Hash"
      ],
      "scoped_full_name": "attributes::Casters::Hash",
      "scoped_category": "processor_class",
      "reference": "attributes::Casters::Hash",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "attributes"
      ],
      "name": "Foobara::BuiltinTypes::Attributes::Casters::Hash",
      "processor_type": "caster"
    },
    "attributes::SupportedProcessors::ElementTypeDeclarations": {
      "scoped_path": [
        "SupportedProcessors",
        "ElementTypeDeclarations"
      ],
      "scoped_name": "SupportedProcessors::ElementTypeDeclarations",
      "scoped_short_name": "ElementTypeDeclarations",
      "scoped_prefix": [
        "SupportedProcessors"
      ],
      "scoped_full_path": [
        "attributes",
        "SupportedProcessors",
        "ElementTypeDeclarations"
      ],
      "scoped_full_name": "attributes::SupportedProcessors::ElementTypeDeclarations",
      "scoped_category": "processor_class",
      "reference": "attributes::SupportedProcessors::ElementTypeDeclarations",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "attributes"
      ],
      "name": "Foobara::BuiltinTypes::Attributes::SupportedProcessors::ElementTypeDeclarations",
      "processor_type": "processor",
      "error_classes": [
        "attributes::SupportedProcessors::ElementTypeDeclarations::UnexpectedAttributesError"
      ]
    },
    "attributes::SupportedTransformers::Defaults": {
      "scoped_path": [
        "SupportedTransformers",
        "Defaults"
      ],
      "scoped_name": "SupportedTransformers::Defaults",
      "scoped_short_name": "Defaults",
      "scoped_prefix": [
        "SupportedTransformers"
      ],
      "scoped_full_path": [
        "attributes",
        "SupportedTransformers",
        "Defaults"
      ],
      "scoped_full_name": "attributes::SupportedTransformers::Defaults",
      "scoped_category": "processor_class",
      "reference": "attributes::SupportedTransformers::Defaults",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "attributes"
      ],
      "name": "Foobara::BuiltinTypes::Attributes::SupportedTransformers::Defaults",
      "processor_type": "transformer"
    },
    "attributes::SupportedValidators::Required": {
      "scoped_path": [
        "SupportedValidators",
        "Required"
      ],
      "scoped_name": "SupportedValidators::Required",
      "scoped_short_name": "Required",
      "scoped_prefix": [
        "SupportedValidators"
      ],
      "scoped_full_path": [
        "attributes",
        "SupportedValidators",
        "Required"
      ],
      "scoped_full_name": "attributes::SupportedValidators::Required",
      "scoped_category": "processor_class",
      "reference": "attributes::SupportedValidators::Required",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "attributes"
      ],
      "name": "Foobara::BuiltinTypes::Attributes::SupportedValidators::Required",
      "processor_type": "transformer",
      "error_classes": [
        "attributes::SupportedValidators::Required::MissingRequiredAttributeError"
      ]
    },
    "attributes::Transformers::RemoveUnexpectedAttributes": {
      "scoped_path": [
        "Transformers",
        "RemoveUnexpectedAttributes"
      ],
      "scoped_name": "Transformers::RemoveUnexpectedAttributes",
      "scoped_short_name": "RemoveUnexpectedAttributes",
      "scoped_prefix": [
        "Transformers"
      ],
      "scoped_full_path": [
        "attributes",
        "Transformers",
        "RemoveUnexpectedAttributes"
      ],
      "scoped_full_name": "attributes::Transformers::RemoveUnexpectedAttributes",
      "scoped_category": "processor_class",
      "reference": "attributes::Transformers::RemoveUnexpectedAttributes",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "attributes"
      ],
      "name": "Foobara::BuiltinTypes::Attributes::Transformers::RemoveUnexpectedAttributes",
      "processor_type": "transformer"
    },
    "datetime::Casters::Date": {
      "scoped_path": [
        "Casters",
        "Date"
      ],
      "scoped_name": "Casters::Date",
      "scoped_short_name": "Date",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "datetime",
        "Casters",
        "Date"
      ],
      "scoped_full_name": "datetime::Casters::Date",
      "scoped_category": "processor_class",
      "reference": "datetime::Casters::Date",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "datetime"
      ],
      "name": "Foobara::BuiltinTypes::Datetime::Casters::Date",
      "processor_type": "caster"
    },
    "datetime::Casters::Hash": {
      "scoped_path": [
        "Casters",
        "Hash"
      ],
      "scoped_name": "Casters::Hash",
      "scoped_short_name": "Hash",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "datetime",
        "Casters",
        "Hash"
      ],
      "scoped_full_name": "datetime::Casters::Hash",
      "scoped_category": "processor_class",
      "reference": "datetime::Casters::Hash",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "datetime"
      ],
      "name": "Foobara::BuiltinTypes::Datetime::Casters::Hash",
      "processor_type": "caster"
    },
    "datetime::Casters::SecondsSinceEpoch": {
      "scoped_path": [
        "Casters",
        "SecondsSinceEpoch"
      ],
      "scoped_name": "Casters::SecondsSinceEpoch",
      "scoped_short_name": "SecondsSinceEpoch",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "datetime",
        "Casters",
        "SecondsSinceEpoch"
      ],
      "scoped_full_name": "datetime::Casters::SecondsSinceEpoch",
      "scoped_category": "processor_class",
      "reference": "datetime::Casters::SecondsSinceEpoch",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "datetime"
      ],
      "name": "Foobara::BuiltinTypes::Datetime::Casters::SecondsSinceEpoch",
      "processor_type": "caster"
    },
    "datetime::Casters::String": {
      "scoped_path": [
        "Casters",
        "String"
      ],
      "scoped_name": "Casters::String",
      "scoped_short_name": "String",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "datetime",
        "Casters",
        "String"
      ],
      "scoped_full_name": "datetime::Casters::String",
      "scoped_category": "processor_class",
      "reference": "datetime::Casters::String",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "datetime"
      ],
      "name": "Foobara::BuiltinTypes::Datetime::Casters::String",
      "processor_type": "caster"
    },
    "detached_entity::Casters::Hash": {
      "scoped_path": [
        "Casters",
        "Hash"
      ],
      "scoped_name": "Casters::Hash",
      "scoped_short_name": "Hash",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "detached_entity",
        "Casters",
        "Hash"
      ],
      "scoped_full_name": "detached_entity::Casters::Hash",
      "scoped_category": "processor_class",
      "reference": "detached_entity::Casters::Hash",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "detached_entity"
      ],
      "name": "Foobara::BuiltinTypes::DetachedEntity::Casters::Hash",
      "processor_type": "caster"
    },
    "detached_entity::Validators::AttributesDeclaration": {
      "scoped_path": [
        "Validators",
        "AttributesDeclaration"
      ],
      "scoped_name": "Validators::AttributesDeclaration",
      "scoped_short_name": "AttributesDeclaration",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "detached_entity",
        "Validators",
        "AttributesDeclaration"
      ],
      "scoped_full_name": "detached_entity::Validators::AttributesDeclaration",
      "scoped_category": "processor_class",
      "reference": "detached_entity::Validators::AttributesDeclaration",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "detached_entity"
      ],
      "name": "Foobara::BuiltinTypes::DetachedEntity::Validators::AttributesDeclaration",
      "processor_type": "processor"
    },
    "duck::SupportedCasters::AllowNil": {
      "scoped_path": [
        "SupportedCasters",
        "AllowNil"
      ],
      "scoped_name": "SupportedCasters::AllowNil",
      "scoped_short_name": "AllowNil",
      "scoped_prefix": [
        "SupportedCasters"
      ],
      "scoped_full_path": [
        "duck",
        "SupportedCasters",
        "AllowNil"
      ],
      "scoped_full_name": "duck::SupportedCasters::AllowNil",
      "scoped_category": "processor_class",
      "reference": "duck::SupportedCasters::AllowNil",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "duck"
      ],
      "name": "Foobara::BuiltinTypes::Duck::SupportedCasters::AllowNil",
      "processor_type": "caster"
    },
    "duck::SupportedValidators::InstanceOf": {
      "scoped_path": [
        "SupportedValidators",
        "InstanceOf"
      ],
      "scoped_name": "SupportedValidators::InstanceOf",
      "scoped_short_name": "InstanceOf",
      "scoped_prefix": [
        "SupportedValidators"
      ],
      "scoped_full_path": [
        "duck",
        "SupportedValidators",
        "InstanceOf"
      ],
      "scoped_full_name": "duck::SupportedValidators::InstanceOf",
      "scoped_category": "processor_class",
      "reference": "duck::SupportedValidators::InstanceOf",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "duck"
      ],
      "name": "Foobara::BuiltinTypes::Duck::SupportedValidators::InstanceOf",
      "processor_type": "transformer",
      "error_classes": [
        "duck::SupportedValidators::InstanceOf::NotInstanceOfError"
      ]
    },
    "duck::SupportedValidators::OneOf": {
      "scoped_path": [
        "SupportedValidators",
        "OneOf"
      ],
      "scoped_name": "SupportedValidators::OneOf",
      "scoped_short_name": "OneOf",
      "scoped_prefix": [
        "SupportedValidators"
      ],
      "scoped_full_path": [
        "duck",
        "SupportedValidators",
        "OneOf"
      ],
      "scoped_full_name": "duck::SupportedValidators::OneOf",
      "scoped_category": "processor_class",
      "reference": "duck::SupportedValidators::OneOf",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "duck"
      ],
      "name": "Foobara::BuiltinTypes::Duck::SupportedValidators::OneOf",
      "processor_type": "transformer",
      "error_classes": [
        "duck::SupportedValidators::OneOf::ValueNotValidError"
      ]
    },
    "email::Transformers::Downcase": {
      "scoped_path": [
        "Transformers",
        "Downcase"
      ],
      "scoped_name": "Transformers::Downcase",
      "scoped_short_name": "Downcase",
      "scoped_prefix": [
        "Transformers"
      ],
      "scoped_full_path": [
        "email",
        "Transformers",
        "Downcase"
      ],
      "scoped_full_name": "email::Transformers::Downcase",
      "scoped_category": "processor_class",
      "reference": "email::Transformers::Downcase",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "name": "Foobara::BuiltinTypes::Email::Transformers::Downcase",
      "processor_type": "transformer"
    },
    "email::Validators::CannotExceed64Characters": {
      "scoped_path": [
        "Validators",
        "CannotExceed64Characters"
      ],
      "scoped_name": "Validators::CannotExceed64Characters",
      "scoped_short_name": "CannotExceed64Characters",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "CannotExceed64Characters"
      ],
      "scoped_full_name": "email::Validators::CannotExceed64Characters",
      "scoped_category": "processor_class",
      "reference": "email::Validators::CannotExceed64Characters",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "name": "Foobara::BuiltinTypes::Email::Validators::CannotExceed64Characters",
      "processor_type": "transformer",
      "error_classes": [
        "email::Validators::CannotExceed64Characters::CannotExceed64CharactersError"
      ]
    },
    "email::Validators::CannotHaveMultipleAtSigns": {
      "scoped_path": [
        "Validators",
        "CannotHaveMultipleAtSigns"
      ],
      "scoped_name": "Validators::CannotHaveMultipleAtSigns",
      "scoped_short_name": "CannotHaveMultipleAtSigns",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "CannotHaveMultipleAtSigns"
      ],
      "scoped_full_name": "email::Validators::CannotHaveMultipleAtSigns",
      "scoped_category": "processor_class",
      "reference": "email::Validators::CannotHaveMultipleAtSigns",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "name": "Foobara::BuiltinTypes::Email::Validators::CannotHaveMultipleAtSigns",
      "processor_type": "transformer",
      "error_classes": [
        "email::Validators::CannotHaveMultipleAtSigns::CannotHaveMultipleAtSignsError"
      ]
    },
    "email::Validators::DomainCannotStartWithOrEndWithAHyphen": {
      "scoped_path": [
        "Validators",
        "DomainCannotStartWithOrEndWithAHyphen"
      ],
      "scoped_name": "Validators::DomainCannotStartWithOrEndWithAHyphen",
      "scoped_short_name": "DomainCannotStartWithOrEndWithAHyphen",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "DomainCannotStartWithOrEndWithAHyphen"
      ],
      "scoped_full_name": "email::Validators::DomainCannotStartWithOrEndWithAHyphen",
      "scoped_category": "processor_class",
      "reference": "email::Validators::DomainCannotStartWithOrEndWithAHyphen",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "name": "Foobara::BuiltinTypes::Email::Validators::DomainCannotStartWithOrEndWithAHyphen",
      "processor_type": "transformer",
      "error_classes": [
        "email::Validators::DomainCannotStartWithOrEndWithAHyphen::DomainCannotStartWithOrEndWithAHyphenError"
      ]
    },
    "email::Validators::FirstPartCannotBeEmpty": {
      "scoped_path": [
        "Validators",
        "FirstPartCannotBeEmpty"
      ],
      "scoped_name": "Validators::FirstPartCannotBeEmpty",
      "scoped_short_name": "FirstPartCannotBeEmpty",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "FirstPartCannotBeEmpty"
      ],
      "scoped_full_name": "email::Validators::FirstPartCannotBeEmpty",
      "scoped_category": "processor_class",
      "reference": "email::Validators::FirstPartCannotBeEmpty",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "name": "Foobara::BuiltinTypes::Email::Validators::FirstPartCannotBeEmpty",
      "processor_type": "transformer",
      "error_classes": [
        "email::Validators::FirstPartCannotBeEmpty::FirstPartCannotBeEmptyError"
      ]
    },
    "email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow": {
      "scoped_path": [
        "Validators",
        "FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow"
      ],
      "scoped_name": "Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow",
      "scoped_short_name": "FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow"
      ],
      "scoped_full_name": "email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow",
      "scoped_category": "processor_class",
      "reference": "email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "name": "Foobara::BuiltinTypes::Email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow",
      "processor_type": "transformer",
      "error_classes": [
        "email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARowError"
      ]
    },
    "email::Validators::FirstPartHasBadCharacters": {
      "scoped_path": [
        "Validators",
        "FirstPartHasBadCharacters"
      ],
      "scoped_name": "Validators::FirstPartHasBadCharacters",
      "scoped_short_name": "FirstPartHasBadCharacters",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "FirstPartHasBadCharacters"
      ],
      "scoped_full_name": "email::Validators::FirstPartHasBadCharacters",
      "scoped_category": "processor_class",
      "reference": "email::Validators::FirstPartHasBadCharacters",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "name": "Foobara::BuiltinTypes::Email::Validators::FirstPartHasBadCharacters",
      "processor_type": "transformer",
      "error_classes": [
        "email::Validators::FirstPartHasBadCharacters::FirstPartHasBadCharactersError"
      ]
    },
    "email::Validators::MustHaveAnAtSign": {
      "scoped_path": [
        "Validators",
        "MustHaveAnAtSign"
      ],
      "scoped_name": "Validators::MustHaveAnAtSign",
      "scoped_short_name": "MustHaveAnAtSign",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "MustHaveAnAtSign"
      ],
      "scoped_full_name": "email::Validators::MustHaveAnAtSign",
      "scoped_category": "processor_class",
      "reference": "email::Validators::MustHaveAnAtSign",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "name": "Foobara::BuiltinTypes::Email::Validators::MustHaveAnAtSign",
      "processor_type": "transformer",
      "error_classes": [
        "email::Validators::MustHaveAnAtSign::MustHaveAnAtSignError"
      ]
    },
    "email::Validators::SecondPartCannotBeEmpty": {
      "scoped_path": [
        "Validators",
        "SecondPartCannotBeEmpty"
      ],
      "scoped_name": "Validators::SecondPartCannotBeEmpty",
      "scoped_short_name": "SecondPartCannotBeEmpty",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "SecondPartCannotBeEmpty"
      ],
      "scoped_full_name": "email::Validators::SecondPartCannotBeEmpty",
      "scoped_category": "processor_class",
      "reference": "email::Validators::SecondPartCannotBeEmpty",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "name": "Foobara::BuiltinTypes::Email::Validators::SecondPartCannotBeEmpty",
      "processor_type": "transformer",
      "error_classes": [
        "email::Validators::SecondPartCannotBeEmpty::SecondPartCannotBeEmptyError"
      ]
    },
    "email::Validators::SecondPartHasBadCharacters": {
      "scoped_path": [
        "Validators",
        "SecondPartHasBadCharacters"
      ],
      "scoped_name": "Validators::SecondPartHasBadCharacters",
      "scoped_short_name": "SecondPartHasBadCharacters",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "email",
        "Validators",
        "SecondPartHasBadCharacters"
      ],
      "scoped_full_name": "email::Validators::SecondPartHasBadCharacters",
      "scoped_category": "processor_class",
      "reference": "email::Validators::SecondPartHasBadCharacters",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "email"
      ],
      "name": "Foobara::BuiltinTypes::Email::Validators::SecondPartHasBadCharacters",
      "processor_type": "transformer",
      "error_classes": [
        "email::Validators::SecondPartHasBadCharacters::SecondPartHasBadCharactersError"
      ]
    },
    "entity::Casters::Hash": {
      "scoped_path": [
        "Casters",
        "Hash"
      ],
      "scoped_name": "Casters::Hash",
      "scoped_short_name": "Hash",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "entity",
        "Casters",
        "Hash"
      ],
      "scoped_full_name": "entity::Casters::Hash",
      "scoped_category": "processor_class",
      "reference": "entity::Casters::Hash",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "entity"
      ],
      "name": "Foobara::BuiltinTypes::Entity::Casters::Hash",
      "processor_type": "caster"
    },
    "entity::Casters::PrimaryKey": {
      "scoped_path": [
        "Casters",
        "PrimaryKey"
      ],
      "scoped_name": "Casters::PrimaryKey",
      "scoped_short_name": "PrimaryKey",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "entity",
        "Casters",
        "PrimaryKey"
      ],
      "scoped_full_name": "entity::Casters::PrimaryKey",
      "scoped_category": "processor_class",
      "reference": "entity::Casters::PrimaryKey",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "entity"
      ],
      "name": "Foobara::BuiltinTypes::Entity::Casters::PrimaryKey",
      "processor_type": "caster"
    },
    "entity::Validators::AttributesDeclaration": {
      "scoped_path": [
        "Validators",
        "AttributesDeclaration"
      ],
      "scoped_name": "Validators::AttributesDeclaration",
      "scoped_short_name": "AttributesDeclaration",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "entity",
        "Validators",
        "AttributesDeclaration"
      ],
      "scoped_full_name": "entity::Validators::AttributesDeclaration",
      "scoped_category": "processor_class",
      "reference": "entity::Validators::AttributesDeclaration",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "entity"
      ],
      "name": "Foobara::BuiltinTypes::Entity::Validators::AttributesDeclaration",
      "processor_type": "processor"
    },
    "integer::Casters::String": {
      "scoped_path": [
        "Casters",
        "String"
      ],
      "scoped_name": "Casters::String",
      "scoped_short_name": "String",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "integer",
        "Casters",
        "String"
      ],
      "scoped_full_name": "integer::Casters::String",
      "scoped_category": "processor_class",
      "reference": "integer::Casters::String",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "integer"
      ],
      "name": "Foobara::BuiltinTypes::Integer::Casters::String",
      "processor_type": "caster"
    },
    "model::Casters::Hash": {
      "scoped_path": [
        "Casters",
        "Hash"
      ],
      "scoped_name": "Casters::Hash",
      "scoped_short_name": "Hash",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "model",
        "Casters",
        "Hash"
      ],
      "scoped_full_name": "model::Casters::Hash",
      "scoped_category": "processor_class",
      "reference": "model::Casters::Hash",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "model"
      ],
      "name": "Foobara::BuiltinTypes::Model::Casters::Hash",
      "processor_type": "caster"
    },
    "model::SupportedTransformers::Mutable": {
      "scoped_path": [
        "SupportedTransformers",
        "Mutable"
      ],
      "scoped_name": "SupportedTransformers::Mutable",
      "scoped_short_name": "Mutable",
      "scoped_prefix": [
        "SupportedTransformers"
      ],
      "scoped_full_path": [
        "model",
        "SupportedTransformers",
        "Mutable"
      ],
      "scoped_full_name": "model::SupportedTransformers::Mutable",
      "scoped_category": "processor_class",
      "reference": "model::SupportedTransformers::Mutable",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "model"
      ],
      "name": "Foobara::BuiltinTypes::Model::SupportedTransformers::Mutable",
      "processor_type": "transformer"
    },
    "model::Validators::AttributesDeclaration": {
      "scoped_path": [
        "Validators",
        "AttributesDeclaration"
      ],
      "scoped_name": "Validators::AttributesDeclaration",
      "scoped_short_name": "AttributesDeclaration",
      "scoped_prefix": [
        "Validators"
      ],
      "scoped_full_path": [
        "model",
        "Validators",
        "AttributesDeclaration"
      ],
      "scoped_full_name": "model::Validators::AttributesDeclaration",
      "scoped_category": "processor_class",
      "reference": "model::Validators::AttributesDeclaration",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "model"
      ],
      "name": "Foobara::BuiltinTypes::Model::Validators::AttributesDeclaration",
      "processor_type": "processor"
    },
    "number::SupportedValidators::Max": {
      "scoped_path": [
        "SupportedValidators",
        "Max"
      ],
      "scoped_name": "SupportedValidators::Max",
      "scoped_short_name": "Max",
      "scoped_prefix": [
        "SupportedValidators"
      ],
      "scoped_full_path": [
        "number",
        "SupportedValidators",
        "Max"
      ],
      "scoped_full_name": "number::SupportedValidators::Max",
      "scoped_category": "processor_class",
      "reference": "number::SupportedValidators::Max",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "number"
      ],
      "name": "Foobara::BuiltinTypes::Number::SupportedValidators::Max",
      "processor_type": "transformer",
      "error_classes": [
        "number::SupportedValidators::Max::MaxExceededError"
      ]
    },
    "number::SupportedValidators::Min": {
      "scoped_path": [
        "SupportedValidators",
        "Min"
      ],
      "scoped_name": "SupportedValidators::Min",
      "scoped_short_name": "Min",
      "scoped_prefix": [
        "SupportedValidators"
      ],
      "scoped_full_path": [
        "number",
        "SupportedValidators",
        "Min"
      ],
      "scoped_full_name": "number::SupportedValidators::Min",
      "scoped_category": "processor_class",
      "reference": "number::SupportedValidators::Min",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "number"
      ],
      "name": "Foobara::BuiltinTypes::Number::SupportedValidators::Min",
      "processor_type": "transformer",
      "error_classes": [
        "number::SupportedValidators::Min::BelowMinimumError"
      ]
    },
    "string::Casters::Numeric": {
      "scoped_path": [
        "Casters",
        "Numeric"
      ],
      "scoped_name": "Casters::Numeric",
      "scoped_short_name": "Numeric",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "string",
        "Casters",
        "Numeric"
      ],
      "scoped_full_name": "string::Casters::Numeric",
      "scoped_category": "processor_class",
      "reference": "string::Casters::Numeric",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "string"
      ],
      "name": "Foobara::BuiltinTypes::String::Casters::Numeric",
      "processor_type": "caster"
    },
    "string::Casters::Symbol": {
      "scoped_path": [
        "Casters",
        "Symbol"
      ],
      "scoped_name": "Casters::Symbol",
      "scoped_short_name": "Symbol",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "string",
        "Casters",
        "Symbol"
      ],
      "scoped_full_name": "string::Casters::Symbol",
      "scoped_category": "processor_class",
      "reference": "string::Casters::Symbol",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "string"
      ],
      "name": "Foobara::BuiltinTypes::String::Casters::Symbol",
      "processor_type": "caster"
    },
    "string::SupportedTransformers::Downcase": {
      "scoped_path": [
        "SupportedTransformers",
        "Downcase"
      ],
      "scoped_name": "SupportedTransformers::Downcase",
      "scoped_short_name": "Downcase",
      "scoped_prefix": [
        "SupportedTransformers"
      ],
      "scoped_full_path": [
        "string",
        "SupportedTransformers",
        "Downcase"
      ],
      "scoped_full_name": "string::SupportedTransformers::Downcase",
      "scoped_category": "processor_class",
      "reference": "string::SupportedTransformers::Downcase",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "string"
      ],
      "name": "Foobara::BuiltinTypes::String::SupportedTransformers::Downcase",
      "processor_type": "transformer"
    },
    "string::SupportedValidators::Matches": {
      "scoped_path": [
        "SupportedValidators",
        "Matches"
      ],
      "scoped_name": "SupportedValidators::Matches",
      "scoped_short_name": "Matches",
      "scoped_prefix": [
        "SupportedValidators"
      ],
      "scoped_full_path": [
        "string",
        "SupportedValidators",
        "Matches"
      ],
      "scoped_full_name": "string::SupportedValidators::Matches",
      "scoped_category": "processor_class",
      "reference": "string::SupportedValidators::Matches",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "string"
      ],
      "name": "Foobara::BuiltinTypes::String::SupportedValidators::Matches",
      "processor_type": "transformer",
      "error_classes": [
        "string::SupportedValidators::Matches::DoesNotMatchError"
      ]
    },
    "string::SupportedValidators::MaxLength": {
      "scoped_path": [
        "SupportedValidators",
        "MaxLength"
      ],
      "scoped_name": "SupportedValidators::MaxLength",
      "scoped_short_name": "MaxLength",
      "scoped_prefix": [
        "SupportedValidators"
      ],
      "scoped_full_path": [
        "string",
        "SupportedValidators",
        "MaxLength"
      ],
      "scoped_full_name": "string::SupportedValidators::MaxLength",
      "scoped_category": "processor_class",
      "reference": "string::SupportedValidators::MaxLength",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "string"
      ],
      "name": "Foobara::BuiltinTypes::String::SupportedValidators::MaxLength",
      "processor_type": "transformer",
      "error_classes": [
        "string::SupportedValidators::MaxLength::MaxLengthExceededError"
      ]
    },
    "symbol::Casters::String": {
      "scoped_path": [
        "Casters",
        "String"
      ],
      "scoped_name": "Casters::String",
      "scoped_short_name": "String",
      "scoped_prefix": [
        "Casters"
      ],
      "scoped_full_path": [
        "symbol",
        "Casters",
        "String"
      ],
      "scoped_full_name": "symbol::Casters::String",
      "scoped_category": "processor_class",
      "reference": "symbol::Casters::String",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "type",
        "symbol"
      ],
      "name": "Foobara::BuiltinTypes::Symbol::Casters::String",
      "processor_type": "caster"
    }
  },
  "type": {
    "Foobara::Auth::Types::Role": {
      "scoped_path": [
        "Types",
        "Role"
      ],
      "scoped_name": "Types::Role",
      "scoped_short_name": "Role",
      "scoped_prefix": [
        "Types"
      ],
      "scoped_full_path": [
        "Foobara",
        "Auth",
        "Types",
        "Role"
      ],
      "scoped_full_name": "Foobara::Auth::Types::Role",
      "scoped_category": "type",
      "reference": "Foobara::Auth::Types::Role",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::Auth"
      ],
      "declaration_data": {
        "type": "detached_entity",
        "name": "Types::Role",
        "model_module": "Foobara::Auth",
        "model_class": "Foobara::Auth::Types::Role",
        "model_base_class": "Foobara::DetachedEntity",
        "attributes_declaration": {
          "type": "attributes",
          "element_type_declarations": {
            "id": {
              "type": "integer"
            },
            "symbol": {
              "type": "symbol"
            }
          },
          "required": [
            "symbol"
          ]
        },
        "primary_key": "id"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "entity",
                "name": "Types::Role",
                "model_module": "Foobara::Auth",
                "model_class": "Foobara::Auth::Types::Role",
                "model_base_class": "Foobara::Entity",
                "attributes_declaration": {
                  "type": "attributes",
                  "element_type_declarations": {
                    "id": {
                      "type": "integer"
                    },
                    "symbol": {
                      "type": "symbol"
                    }
                  },
                  "required": [
                    "symbol"
                  ]
                },
                "primary_key": "id"
              }
            }
          }
        }
      },
      "name": "Types::Role",
      "target_classes": [
        "Foobara::Auth::Types::Role"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "detached_entity",
        "duck",
        "integer",
        "symbol"
      ],
      "description": null,
      "base_type": "detached_entity",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_transformers": [
        "model::SupportedTransformers::Mutable"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf"
      ],
      "processors": {
        "caster_classes": [
          "entity::Casters::Hash",
          "entity::Casters::PrimaryKey"
        ],
        "validator_classes": [
          "entity::Validators::AttributesDeclaration"
        ]
      },
      "attributes_type": {
        "type": "attributes",
        "element_type_declarations": {
          "id": {
            "type": "integer"
          },
          "symbol": {
            "type": "symbol"
          }
        },
        "required": [
          "symbol"
        ]
      },
      "organization_name": "Foobara",
      "domain_name": "Auth",
      "model_name": "Types::Role",
      "model_base_class": "Foobara::Entity",
      "model_class": "Foobara::Auth::Types::Role",
      "entity_name": "Types::Role",
      "primary_key_attribute": "id",
      "primary_key_type": {
        "type": "integer"
      }
    },
    "Foobara::Auth::Types::Token": {
      "scoped_path": [
        "Types",
        "Token"
      ],
      "scoped_name": "Types::Token",
      "scoped_short_name": "Token",
      "scoped_prefix": [
        "Types"
      ],
      "scoped_full_path": [
        "Foobara",
        "Auth",
        "Types",
        "Token"
      ],
      "scoped_full_name": "Foobara::Auth::Types::Token",
      "scoped_category": "type",
      "reference": "Foobara::Auth::Types::Token",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::Auth"
      ],
      "declaration_data": {
        "type": "detached_entity",
        "name": "Types::Token",
        "model_module": "Foobara::Auth",
        "model_class": "Foobara::Auth::Types::Token",
        "model_base_class": "Foobara::DetachedEntity",
        "attributes_declaration": {
          "type": "attributes",
          "element_type_declarations": {
            "id": {
              "type": "string"
            },
            "state": {
              "type": "Foobara::Auth::token_state"
            },
            "token_parameters": {
              "type": "duck"
            },
            "token_group": {
              "allow_nil": true,
              "type": "string"
            },
            "expires_at": {
              "allow_nil": true,
              "type": "datetime"
            },
            "created_at": {
              "type": "datetime"
            }
          },
          "required": [
            "created_at",
            "id",
            "state",
            "token_parameters"
          ],
          "defaults": {
            "state": "needs_approval"
          }
        },
        "primary_key": "id"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "entity",
                "name": "Types::Token",
                "model_module": "Foobara::Auth",
                "model_class": "Foobara::Auth::Types::Token",
                "model_base_class": "Foobara::Entity",
                "attributes_declaration": {
                  "type": "attributes",
                  "element_type_declarations": {
                    "id": {
                      "type": "string"
                    },
                    "hashed_secret": {
                      "sensitive": true,
                      "type": "string"
                    },
                    "state": {
                      "type": "Foobara::Auth::token_state"
                    },
                    "token_parameters": {
                      "type": "duck"
                    },
                    "token_group": {
                      "allow_nil": true,
                      "type": "string"
                    },
                    "expires_at": {
                      "allow_nil": true,
                      "type": "datetime"
                    },
                    "created_at": {
                      "type": "datetime"
                    }
                  },
                  "required": [
                    "created_at",
                    "hashed_secret",
                    "id",
                    "state",
                    "token_parameters"
                  ],
                  "defaults": {
                    "state": "needs_approval"
                  }
                },
                "primary_key": "id"
              }
            }
          }
        }
      },
      "name": "Types::Token",
      "target_classes": [
        "Foobara::Auth::Types::Token"
      ],
      "types_depended_on": [
        "Foobara::Auth::token_state",
        "array",
        "attributes",
        "datetime",
        "detached_entity",
        "duck",
        "string",
        "symbol"
      ],
      "description": null,
      "base_type": "detached_entity",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_transformers": [
        "model::SupportedTransformers::Mutable"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf"
      ],
      "processors": {
        "caster_classes": [
          "entity::Casters::Hash",
          "entity::Casters::PrimaryKey"
        ],
        "validator_classes": [
          "entity::Validators::AttributesDeclaration"
        ]
      },
      "attributes_type": {
        "type": "attributes",
        "element_type_declarations": {
          "id": {
            "type": "string"
          },
          "state": {
            "type": "Foobara::Auth::token_state"
          },
          "token_parameters": {
            "type": "duck"
          },
          "token_group": {
            "allow_nil": true,
            "type": "string"
          },
          "expires_at": {
            "allow_nil": true,
            "type": "datetime"
          },
          "created_at": {
            "type": "datetime"
          }
        },
        "required": [
          "created_at",
          "id",
          "state",
          "token_parameters"
        ],
        "defaults": {
          "state": "needs_approval"
        }
      },
      "organization_name": "Foobara",
      "domain_name": "Auth",
      "model_name": "Types::Token",
      "model_base_class": "Foobara::Entity",
      "model_class": "Foobara::Auth::Types::Token",
      "entity_name": "Types::Token",
      "primary_key_attribute": "id",
      "primary_key_type": {
        "type": "string"
      }
    },
    "Foobara::Auth::Types::User": {
      "scoped_path": [
        "Types",
        "User"
      ],
      "scoped_name": "Types::User",
      "scoped_short_name": "User",
      "scoped_prefix": [
        "Types"
      ],
      "scoped_full_path": [
        "Foobara",
        "Auth",
        "Types",
        "User"
      ],
      "scoped_full_name": "Foobara::Auth::Types::User",
      "scoped_category": "type",
      "reference": "Foobara::Auth::Types::User",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::Auth"
      ],
      "declaration_data": {
        "type": "detached_entity",
        "name": "Types::User",
        "model_module": "Foobara::Auth",
        "model_class": "Foobara::Auth::Types::User",
        "model_base_class": "Foobara::DetachedEntity",
        "attributes_declaration": {
          "type": "attributes",
          "element_type_declarations": {
            "id": {
              "type": "integer"
            },
            "username": {
              "type": "string"
            },
            "email": {
              "allow_nil": true,
              "type": "email"
            },
            "roles": {
              "type": "array",
              "element_type_declaration": {
                "type": "Foobara::Auth::Types::Role"
              }
            }
          },
          "required": [
            "username"
          ],
          "defaults": {
            "roles": []
          }
        },
        "primary_key": "id"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "entity",
                "name": "Types::User",
                "model_module": "Foobara::Auth",
                "model_class": "Foobara::Auth::Types::User",
                "model_base_class": "Foobara::Entity",
                "attributes_declaration": {
                  "type": "attributes",
                  "element_type_declarations": {
                    "id": {
                      "type": "integer"
                    },
                    "username": {
                      "type": "string"
                    },
                    "email": {
                      "allow_nil": true,
                      "type": "email"
                    },
                    "roles": {
                      "type": "array",
                      "element_type_declaration": {
                        "type": "Foobara::Auth::Types::Role"
                      }
                    },
                    "api_keys": {
                      "type": "array",
                      "element_type_declaration": {
                        "type": "Foobara::Auth::Types::Token"
                      },
                      "sensitive": true
                    },
                    "refresh_tokens": {
                      "type": "array",
                      "element_type_declaration": {
                        "type": "Foobara::Auth::Types::Token"
                      },
                      "sensitive": true
                    },
                    "password_secret": {
                      "sensitive": true,
                      "allow_nil": true,
                      "type": "Foobara::Auth::Types::Secret"
                    }
                  },
                  "required": [
                    "username"
                  ],
                  "defaults": {
                    "roles": [],
                    "api_keys": [],
                    "refresh_tokens": []
                  }
                },
                "primary_key": "id"
              }
            }
          }
        }
      },
      "name": "Types::User",
      "target_classes": [
        "Foobara::Auth::Types::User"
      ],
      "types_depended_on": [
        "Foobara::Auth::Types::Role",
        "array",
        "attributes",
        "detached_entity",
        "duck",
        "email",
        "integer",
        "string",
        "symbol"
      ],
      "description": null,
      "base_type": "detached_entity",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_transformers": [
        "model::SupportedTransformers::Mutable"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf"
      ],
      "processors": {
        "caster_classes": [
          "entity::Casters::Hash",
          "entity::Casters::PrimaryKey"
        ],
        "validator_classes": [
          "entity::Validators::AttributesDeclaration"
        ]
      },
      "attributes_type": {
        "type": "attributes",
        "element_type_declarations": {
          "id": {
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "allow_nil": true,
            "type": "email"
          },
          "roles": {
            "type": "array",
            "element_type_declaration": {
              "type": "Foobara::Auth::Types::Role"
            }
          }
        },
        "required": [
          "username"
        ],
        "defaults": {
          "roles": []
        }
      },
      "organization_name": "Foobara",
      "domain_name": "Auth",
      "model_name": "Types::User",
      "model_base_class": "Foobara::Entity",
      "model_class": "Foobara::Auth::Types::User",
      "depends_on": [
        "Foobara::Auth::Types::Role",
        "Foobara::Auth::Types::Token"
      ],
      "deep_depends_on": [
        "Foobara::Auth::Types::Token",
        "Foobara::Auth::Types::Role"
      ],
      "associations": {
        "roles.#": "Foobara::Auth::Types::Role"
      },
      "deep_associations": {
        "api_keys.#": "Foobara::Auth::Types::Token",
        "refresh_tokens.#": "Foobara::Auth::Types::Token",
        "roles.#": "Foobara::Auth::Types::Role"
      },
      "entity_name": "Types::User",
      "primary_key_attribute": "id",
      "primary_key_type": {
        "type": "integer"
      }
    },
    "Foobara::Auth::token_state": {
      "scoped_path": [
        "token_state"
      ],
      "scoped_name": "token_state",
      "scoped_short_name": "token_state",
      "scoped_prefix": null,
      "scoped_full_path": [
        "Foobara",
        "Auth",
        "token_state"
      ],
      "scoped_full_name": "Foobara::Auth::token_state",
      "scoped_category": "type",
      "reference": "Foobara::Auth::token_state",
      "domain": "Foobara::Auth",
      "organization": "Foobara",
      "parent": [
        "domain",
        "Foobara::Auth"
      ],
      "declaration_data": {
        "one_of": [
          "active",
          "expired",
          "inactive",
          "needs_approval",
          "rejected",
          "revoked"
        ],
        "type": "symbol"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "one_of": [
                  "active",
                  "expired",
                  "inactive",
                  "needs_approval",
                  "rejected",
                  "revoked"
                ],
                "type": "symbol"
              }
            }
          }
        },
        "data.value_not_valid": {
          "category": "data",
          "symbol": "value_not_valid",
          "key": "data.value_not_valid",
          "error": "duck::SupportedValidators::OneOf::ValueNotValidError",
          "processor_class": "duck::SupportedValidators::OneOf",
          "processor_manifest_data": {
            "one_of": [
              "active",
              "expired",
              "inactive",
              "needs_approval",
              "rejected",
              "revoked"
            ]
          }
        }
      },
      "name": "Anonymous symbol extension",
      "target_classes": [
        "Symbol"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "description": null,
      "base_type": "symbol",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf"
      ],
      "processors": {
        "casters": [
          "symbol::Casters::string"
        ],
        "caster_classes": [
          "symbol::Casters::String"
        ],
        "validator_classes": [
          "duck::SupportedValidators::OneOf"
        ]
      }
    },
    "array": {
      "scoped_path": [
        "array"
      ],
      "scoped_name": "array",
      "scoped_short_name": "array",
      "scoped_prefix": null,
      "scoped_full_path": [
        "array"
      ],
      "scoped_full_name": "array",
      "scoped_category": "type",
      "reference": "array",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "domain",
        "global_organization::global_domain"
      ],
      "declaration_data": {
        "type": "array"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "array"
              }
            }
          }
        }
      },
      "name": "array",
      "target_classes": [
        "Array"
      ],
      "types_depended_on": [
        "attributes",
        "duck",
        "duckture",
        "symbol"
      ],
      "builtin": true,
      "description": "Built-in array type",
      "base_type": "duckture",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_validators": [
        "array::SupportedValidators::Size",
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf"
      ],
      "supported_processors": [
        "array::SupportedProcessors::ElementTypeDeclaration"
      ],
      "processors": {
        "casters": [
          "array::Casters::arrayable"
        ],
        "caster_classes": [
          "array::Casters::Arrayable"
        ]
      }
    },
    "associative_array": {
      "scoped_path": [
        "associative_array"
      ],
      "scoped_name": "associative_array",
      "scoped_short_name": "associative_array",
      "scoped_prefix": null,
      "scoped_full_path": [
        "associative_array"
      ],
      "scoped_full_name": "associative_array",
      "scoped_category": "type",
      "reference": "associative_array",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "domain",
        "global_organization::global_domain"
      ],
      "declaration_data": {
        "type": "associative_array"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "associative_array"
              }
            }
          }
        }
      },
      "name": "associative_array",
      "target_classes": [
        "Hash"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "duckture",
        "symbol"
      ],
      "builtin": true,
      "description": "Built-in associative_array type",
      "base_type": "duckture",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf"
      ],
      "supported_processors": [
        "associative_array::SupportedProcessors::KeyTypeDeclaration",
        "associative_array::SupportedProcessors::ValueTypeDeclaration"
      ],
      "processors": {
        "casters": [
          "associative_array::Casters::array"
        ],
        "caster_classes": [
          "associative_array::Casters::Array"
        ]
      }
    },
    "atomic_duck": {
      "scoped_path": [
        "atomic_duck"
      ],
      "scoped_name": "atomic_duck",
      "scoped_short_name": "atomic_duck",
      "scoped_prefix": null,
      "scoped_full_path": [
        "atomic_duck"
      ],
      "scoped_full_name": "atomic_duck",
      "scoped_category": "type",
      "reference": "atomic_duck",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "domain",
        "global_organization::global_domain"
      ],
      "declaration_data": {
        "type": "atomic_duck"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "atomic_duck"
              }
            }
          }
        }
      },
      "name": "atomic_duck",
      "target_classes": [
        "Object"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "builtin": true,
      "description": "Built-in atomic_duck type",
      "base_type": "duck",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf"
      ]
    },
    "attributes": {
      "scoped_path": [
        "attributes"
      ],
      "scoped_name": "attributes",
      "scoped_short_name": "attributes",
      "scoped_prefix": null,
      "scoped_full_path": [
        "attributes"
      ],
      "scoped_full_name": "attributes",
      "scoped_category": "type",
      "reference": "attributes",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "domain",
        "global_organization::global_domain"
      ],
      "declaration_data": {
        "type": "attributes"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "attributes"
              }
            }
          }
        }
      },
      "name": "attributes",
      "types_depended_on": [
        "array",
        "associative_array",
        "duck",
        "symbol"
      ],
      "builtin": true,
      "description": "Built-in attributes type",
      "base_type": "associative_array",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_transformers": [
        "attributes::SupportedTransformers::Defaults"
      ],
      "supported_validators": [
        "attributes::SupportedValidators::Required",
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf"
      ],
      "supported_processors": [
        "associative_array::SupportedProcessors::KeyTypeDeclaration",
        "associative_array::SupportedProcessors::ValueTypeDeclaration",
        "attributes::SupportedProcessors::ElementTypeDeclarations"
      ],
      "processors": {
        "casters": [
          "attributes::Casters::array",
          "attributes::Casters::hash"
        ],
        "caster_classes": [
          "attributes::Casters::Array",
          "attributes::Casters::Hash"
        ],
        "transformer_classes": [
          "attributes::Transformers::RemoveUnexpectedAttributes"
        ]
      }
    },
    "datetime": {
      "scoped_path": [
        "datetime"
      ],
      "scoped_name": "datetime",
      "scoped_short_name": "datetime",
      "scoped_prefix": null,
      "scoped_full_path": [
        "datetime"
      ],
      "scoped_full_name": "datetime",
      "scoped_category": "type",
      "reference": "datetime",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "domain",
        "global_organization::global_domain"
      ],
      "declaration_data": {
        "type": "datetime"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "datetime"
              }
            }
          }
        }
      },
      "name": "datetime",
      "target_classes": [
        "Time"
      ],
      "types_depended_on": [
        "array",
        "atomic_duck",
        "attributes",
        "duck",
        "symbol"
      ],
      "builtin": true,
      "description": "Built-in datetime type",
      "base_type": "atomic_duck",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf"
      ],
      "processors": {
        "casters": [
          "datetime::Casters::date",
          "datetime::Casters::hash",
          "datetime::Casters::seconds_since_epoch",
          "datetime::Casters::string"
        ],
        "caster_classes": [
          "datetime::Casters::Date",
          "datetime::Casters::Hash",
          "datetime::Casters::SecondsSinceEpoch",
          "datetime::Casters::String"
        ]
      }
    },
    "detached_entity": {
      "scoped_path": [
        "detached_entity"
      ],
      "scoped_name": "detached_entity",
      "scoped_short_name": "detached_entity",
      "scoped_prefix": null,
      "scoped_full_path": [
        "detached_entity"
      ],
      "scoped_full_name": "detached_entity",
      "scoped_category": "type",
      "reference": "detached_entity",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "domain",
        "global_organization::global_domain"
      ],
      "declaration_data": {
        "type": "detached_entity"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "detached_entity"
              }
            }
          }
        }
      },
      "name": "detached_entity",
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "model",
        "symbol"
      ],
      "builtin": true,
      "description": "Built-in detached_entity type",
      "base_type": "model",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_transformers": [
        "model::SupportedTransformers::Mutable"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf"
      ],
      "processors": {
        "caster_classes": [
          "detached_entity::Casters::Hash"
        ],
        "validator_classes": [
          "detached_entity::Validators::AttributesDeclaration"
        ]
      }
    },
    "duck": {
      "scoped_path": [
        "duck"
      ],
      "scoped_name": "duck",
      "scoped_short_name": "duck",
      "scoped_prefix": null,
      "scoped_full_path": [
        "duck"
      ],
      "scoped_full_name": "duck",
      "scoped_category": "type",
      "reference": "duck",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "domain",
        "global_organization::global_domain"
      ],
      "declaration_data": {
        "type": "duck"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "duck"
              }
            }
          }
        }
      },
      "name": "duck",
      "target_classes": [
        "Object"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "symbol"
      ],
      "builtin": true,
      "description": "Built-in duck type",
      "base_type": null,
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf"
      ]
    },
    "duckture": {
      "scoped_path": [
        "duckture"
      ],
      "scoped_name": "duckture",
      "scoped_short_name": "duckture",
      "scoped_prefix": null,
      "scoped_full_path": [
        "duckture"
      ],
      "scoped_full_name": "duckture",
      "scoped_category": "type",
      "reference": "duckture",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "domain",
        "global_organization::global_domain"
      ],
      "declaration_data": {
        "type": "duckture"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "duckture"
              }
            }
          }
        }
      },
      "name": "duckture",
      "target_classes": [
        "Object"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "symbol"
      ],
      "builtin": true,
      "description": "Built-in duckture type",
      "base_type": "duck",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf"
      ]
    },
    "email": {
      "scoped_path": [
        "email"
      ],
      "scoped_name": "email",
      "scoped_short_name": "email",
      "scoped_prefix": null,
      "scoped_full_path": [
        "email"
      ],
      "scoped_full_name": "email",
      "scoped_category": "type",
      "reference": "email",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "domain",
        "global_organization::global_domain"
      ],
      "declaration_data": {
        "type": "email"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "email"
              }
            }
          }
        },
        "data.cannot_exceed64_characters": {
          "category": "data",
          "symbol": "cannot_exceed64_characters",
          "key": "data.cannot_exceed64_characters",
          "error": "email::Validators::CannotExceed64Characters::CannotExceed64CharactersError",
          "processor": "email::Validators::cannot_exceed64_characters",
          "processor_class": "email::Validators::CannotExceed64Characters"
        },
        "data.cannot_have_multiple_at_signs": {
          "category": "data",
          "symbol": "cannot_have_multiple_at_signs",
          "key": "data.cannot_have_multiple_at_signs",
          "error": "email::Validators::CannotHaveMultipleAtSigns::CannotHaveMultipleAtSignsError",
          "processor": "email::Validators::cannot_have_multiple_at_signs",
          "processor_class": "email::Validators::CannotHaveMultipleAtSigns"
        },
        "data.domain_cannot_start_with_or_end_with_a_hyphen": {
          "category": "data",
          "symbol": "domain_cannot_start_with_or_end_with_a_hyphen",
          "key": "data.domain_cannot_start_with_or_end_with_a_hyphen",
          "error": "email::Validators::DomainCannotStartWithOrEndWithAHyphen::DomainCannotStartWithOrEndWithAHyphenError",
          "processor": "email::Validators::domain_cannot_start_with_or_end_with_a_hyphen",
          "processor_class": "email::Validators::DomainCannotStartWithOrEndWithAHyphen"
        },
        "data.first_part_cannot_be_empty": {
          "category": "data",
          "symbol": "first_part_cannot_be_empty",
          "key": "data.first_part_cannot_be_empty",
          "error": "email::Validators::FirstPartCannotBeEmpty::FirstPartCannotBeEmptyError",
          "processor": "email::Validators::first_part_cannot_be_empty",
          "processor_class": "email::Validators::FirstPartCannotBeEmpty"
        },
        "data.first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row": {
          "category": "data",
          "symbol": "first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row",
          "key": "data.first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row",
          "error": "email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARowError",
          "processor": "email::Validators::first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row",
          "processor_class": "email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow"
        },
        "data.first_part_has_bad_characters": {
          "category": "data",
          "symbol": "first_part_has_bad_characters",
          "key": "data.first_part_has_bad_characters",
          "error": "email::Validators::FirstPartHasBadCharacters::FirstPartHasBadCharactersError",
          "processor": "email::Validators::first_part_has_bad_characters",
          "processor_class": "email::Validators::FirstPartHasBadCharacters"
        },
        "data.must_have_an_at_sign": {
          "category": "data",
          "symbol": "must_have_an_at_sign",
          "key": "data.must_have_an_at_sign",
          "error": "email::Validators::MustHaveAnAtSign::MustHaveAnAtSignError",
          "processor": "email::Validators::must_have_an_at_sign",
          "processor_class": "email::Validators::MustHaveAnAtSign"
        },
        "data.second_part_cannot_be_empty": {
          "category": "data",
          "symbol": "second_part_cannot_be_empty",
          "key": "data.second_part_cannot_be_empty",
          "error": "email::Validators::SecondPartCannotBeEmpty::SecondPartCannotBeEmptyError",
          "processor": "email::Validators::second_part_cannot_be_empty",
          "processor_class": "email::Validators::SecondPartCannotBeEmpty"
        },
        "data.second_part_has_bad_characters": {
          "category": "data",
          "symbol": "second_part_has_bad_characters",
          "key": "data.second_part_has_bad_characters",
          "error": "email::Validators::SecondPartHasBadCharacters::SecondPartHasBadCharactersError",
          "processor": "email::Validators::second_part_has_bad_characters",
          "processor_class": "email::Validators::SecondPartHasBadCharacters"
        }
      },
      "name": "email",
      "target_classes": [
        "String"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "string",
        "symbol"
      ],
      "builtin": true,
      "description": "Built-in email type",
      "base_type": "string",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_transformers": [
        "string::SupportedTransformers::Downcase"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf",
        "string::SupportedValidators::Matches",
        "string::SupportedValidators::MaxLength"
      ],
      "processors": {
        "casters": [
          "string::Casters::numeric",
          "string::Casters::symbol"
        ],
        "caster_classes": [
          "string::Casters::Numeric",
          "string::Casters::Symbol"
        ],
        "transformers": [
          "email::Transformers::downcase"
        ],
        "transformer_classes": [
          "email::Transformers::Downcase"
        ],
        "validators": [
          "email::Validators::cannot_exceed64_characters",
          "email::Validators::cannot_have_multiple_at_signs",
          "email::Validators::domain_cannot_start_with_or_end_with_a_hyphen",
          "email::Validators::first_part_cannot_be_empty",
          "email::Validators::first_part_cannot_start_with_or_end_with_a_dot_or_have_two_dots_in_a_row",
          "email::Validators::first_part_has_bad_characters",
          "email::Validators::must_have_an_at_sign",
          "email::Validators::second_part_cannot_be_empty",
          "email::Validators::second_part_has_bad_characters"
        ],
        "validator_classes": [
          "email::Validators::CannotExceed64Characters",
          "email::Validators::CannotHaveMultipleAtSigns",
          "email::Validators::DomainCannotStartWithOrEndWithAHyphen",
          "email::Validators::FirstPartCannotBeEmpty",
          "email::Validators::FirstPartCannotStartWithOrEndWithADotOrHaveTwoDotsInARow",
          "email::Validators::FirstPartHasBadCharacters",
          "email::Validators::MustHaveAnAtSign",
          "email::Validators::SecondPartCannotBeEmpty",
          "email::Validators::SecondPartHasBadCharacters"
        ]
      }
    },
    "entity": {
      "scoped_path": [
        "entity"
      ],
      "scoped_name": "entity",
      "scoped_short_name": "entity",
      "scoped_prefix": null,
      "scoped_full_path": [
        "entity"
      ],
      "scoped_full_name": "entity",
      "scoped_category": "type",
      "reference": "entity",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "domain",
        "global_organization::global_domain"
      ],
      "declaration_data": {
        "type": "entity"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "entity"
              }
            }
          }
        }
      },
      "name": "entity",
      "types_depended_on": [
        "array",
        "attributes",
        "detached_entity",
        "duck",
        "symbol"
      ],
      "builtin": true,
      "description": "Built-in entity type",
      "base_type": "detached_entity",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_transformers": [
        "model::SupportedTransformers::Mutable"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf"
      ],
      "processors": {
        "caster_classes": [
          "entity::Casters::Hash",
          "entity::Casters::PrimaryKey"
        ],
        "validator_classes": [
          "entity::Validators::AttributesDeclaration"
        ]
      }
    },
    "integer": {
      "scoped_path": [
        "integer"
      ],
      "scoped_name": "integer",
      "scoped_short_name": "integer",
      "scoped_prefix": null,
      "scoped_full_path": [
        "integer"
      ],
      "scoped_full_name": "integer",
      "scoped_category": "type",
      "reference": "integer",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "domain",
        "global_organization::global_domain"
      ],
      "declaration_data": {
        "type": "integer"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "integer"
              }
            }
          }
        }
      },
      "name": "integer",
      "target_classes": [
        "Integer"
      ],
      "types_depended_on": [
        "array",
        "attributes",
        "duck",
        "number",
        "symbol"
      ],
      "builtin": true,
      "description": "Built-in integer type",
      "base_type": "number",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf",
        "number::SupportedValidators::Max",
        "number::SupportedValidators::Min"
      ],
      "processors": {
        "casters": [
          "integer::Casters::string"
        ],
        "caster_classes": [
          "integer::Casters::String"
        ]
      }
    },
    "model": {
      "scoped_path": [
        "model"
      ],
      "scoped_name": "model",
      "scoped_short_name": "model",
      "scoped_prefix": null,
      "scoped_full_path": [
        "model"
      ],
      "scoped_full_name": "model",
      "scoped_category": "type",
      "reference": "model",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "domain",
        "global_organization::global_domain"
      ],
      "declaration_data": {
        "type": "model"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "model"
              }
            }
          }
        }
      },
      "name": "model",
      "types_depended_on": [
        "array",
        "atomic_duck",
        "attributes",
        "duck",
        "symbol"
      ],
      "builtin": true,
      "description": "Built-in model type",
      "base_type": "atomic_duck",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_transformers": [
        "model::SupportedTransformers::Mutable"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf"
      ],
      "processors": {
        "caster_classes": [
          "model::Casters::Hash"
        ],
        "validator_classes": [
          "model::Validators::AttributesDeclaration"
        ]
      }
    },
    "number": {
      "scoped_path": [
        "number"
      ],
      "scoped_name": "number",
      "scoped_short_name": "number",
      "scoped_prefix": null,
      "scoped_full_path": [
        "number"
      ],
      "scoped_full_name": "number",
      "scoped_category": "type",
      "reference": "number",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "domain",
        "global_organization::global_domain"
      ],
      "declaration_data": {
        "type": "number"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "number"
              }
            }
          }
        }
      },
      "name": "number",
      "target_classes": [
        "Object"
      ],
      "types_depended_on": [
        "array",
        "atomic_duck",
        "attributes",
        "duck",
        "symbol"
      ],
      "builtin": true,
      "description": "Built-in number type",
      "base_type": "atomic_duck",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf",
        "number::SupportedValidators::Max",
        "number::SupportedValidators::Min"
      ]
    },
    "string": {
      "scoped_path": [
        "string"
      ],
      "scoped_name": "string",
      "scoped_short_name": "string",
      "scoped_prefix": null,
      "scoped_full_path": [
        "string"
      ],
      "scoped_full_name": "string",
      "scoped_category": "type",
      "reference": "string",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "domain",
        "global_organization::global_domain"
      ],
      "declaration_data": {
        "type": "string"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "string"
              }
            }
          }
        }
      },
      "name": "string",
      "target_classes": [
        "String"
      ],
      "types_depended_on": [
        "array",
        "atomic_duck",
        "attributes",
        "duck",
        "symbol"
      ],
      "builtin": true,
      "description": "Built-in string type",
      "base_type": "atomic_duck",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_transformers": [
        "string::SupportedTransformers::Downcase"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf",
        "string::SupportedValidators::Matches",
        "string::SupportedValidators::MaxLength"
      ],
      "processors": {
        "casters": [
          "string::Casters::numeric",
          "string::Casters::symbol"
        ],
        "caster_classes": [
          "string::Casters::Numeric",
          "string::Casters::Symbol"
        ]
      }
    },
    "symbol": {
      "scoped_path": [
        "symbol"
      ],
      "scoped_name": "symbol",
      "scoped_short_name": "symbol",
      "scoped_prefix": null,
      "scoped_full_path": [
        "symbol"
      ],
      "scoped_full_name": "symbol",
      "scoped_category": "type",
      "reference": "symbol",
      "domain": "global_organization::global_domain",
      "organization": "global_organization",
      "parent": [
        "domain",
        "global_organization::global_domain"
      ],
      "declaration_data": {
        "type": "symbol"
      },
      "possible_errors": {
        "data.cannot_cast": {
          "category": "data",
          "symbol": "cannot_cast",
          "key": "data.cannot_cast",
          "error": "Foobara::Value::Processor::Casting::CannotCastError",
          "processor_class": "Foobara::Value::Processor::Casting",
          "processor_manifest_data": {
            "casting": {
              "cast_to": {
                "type": "symbol"
              }
            }
          }
        }
      },
      "name": "symbol",
      "target_classes": [
        "Symbol"
      ],
      "types_depended_on": [
        "array",
        "atomic_duck",
        "attributes",
        "duck"
      ],
      "builtin": true,
      "description": "Built-in symbol type",
      "base_type": "atomic_duck",
      "supported_casters": [
        "duck::SupportedCasters::AllowNil"
      ],
      "supported_validators": [
        "duck::SupportedValidators::InstanceOf",
        "duck::SupportedValidators::OneOf"
      ],
      "processors": {
        "casters": [
          "symbol::Casters::string"
        ],
        "caster_classes": [
          "symbol::Casters::String"
        ]
      }
    }
  },
  "metadata": {
    "when": "2025-03-31 11:57:43 -0700",
    "url": "http://localhost:3000/manifest"
  }
}
