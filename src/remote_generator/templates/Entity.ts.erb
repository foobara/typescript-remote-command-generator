import {Entity, EntityPrimaryKeyType, Never, UnloadedAttributesType} from "<%= path_to_root %>base/Entity"

<% entity_generators.each do |entity_generator| %>
<% elements_to_generate << entity_generator.relevant_manifest %>
import { <%= entity_generator.all_names.join(", ") %> } from "<%= path_to_root %><%= entity_generator.import_path %>"
<% end %>

export type <%= entity_name %>PrimaryKeyType = <%= primary_key_ts_type %>
export const <%= entity_name_downcase %>PrimaryKeyAttributeName: "<%= primary_key_name %>" = "<%= primary_key_name %>"

export interface <%= entity_name %>AttributesType <%= attributes_type_ts_type %>

<% if has_associations? %>
export interface <%= entity_name %>AtomAttributesType extends <%= entity_name %>AttributesType <%= atom_attributes_ts_type %>

export interface <%= entity_name %>AggregateAttributesType extends <%= entity_name %>AttributesType <%= aggregate_attributes_ts_type %>
<% end %>

export class <%= entity_name %><
  AttributesType extends <%= attributes_types_union %> = <%= attributes_types_union %>
> extends Entity<<%= entity_name %>PrimaryKeyType, AttributesType> {
  static readonly entityName: string = "<%= entity_name %>"
  static readonly primaryKeyAttributeName: "<%= primary_key_name %>" = "<%= primary_key_name %>"

  get <%= primary_key_name %> (): <%= entity_name %>PrimaryKeyType {
    return this.primaryKey
  }

  <% attribute_declarations.each do |attribute_name, attribute_type| %>
  get <%= attribute_name %> (): AttributesType["<%= attribute_name %>"] {
    return this.readAttribute("<%= attribute_name %>")
  }
  <% end %>
}

export class Unloaded<%= entity_name %> extends <%= entity_name %><Never<<%= entity_name %>AttributesType>> {
  constructor(id: <%= entity_name %>PrimaryKeyType) {
    super(id)
  }

  get isLoaded(): false { return false }
  get isAtom(): false { return false }
  get isAggregate(): false { return false }
}

export class Loaded<%= entity_name %><T extends <%= entity_name %>AttributesType> extends <%= entity_name %><T> {
  constructor(id: <%= entity_name %>PrimaryKeyType, attributes: T) {
    super(id, attributes)
  }

  get isLoaded(): true { return true }
  get isAtom(): true { return true }
  get isAggregate(): true { return true }

  <% attribute_declarations.each do |attribute_name, attribute_type| %>
  get <%= attribute_name %> (): T["<%= attribute_name %>"] {
    return this._attributes.<%= attribute_name %>
  }
  <% end %>
}

export class <%= entity_name %>Atom extends Loaded<%= entity_name %><<%= entity_name %>AtomAttributesType> {
}

export class <%= entity_name %>Aggregate extends Loaded<%= entity_name %><<%= entity_name %>AggregateAttributesType> {
}
