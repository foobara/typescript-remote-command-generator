import { <%= base_ts_class %> } from "<%= path_to_root %>base/<%= base_ts_class %>"
<% dependency_roots.each do |dependency_root| %>
import { <%= dependency_root.scoped_name %> } from "<%= path_to_root %><%= dependency_root.import_path %>"
<% end %>

<% if entity? %>
export type <%= model_name %>PrimaryKeyType = <%= primary_key_ts_type %>
export const <%= model_name_downcase %>PrimaryKeyAttributeName: "<%= primary_key_name %>" = "<%= primary_key_name %>"
<% end %>
export interface <%= model_name %>AttributesType <%= attributes_type_ts_type %>

export class <%= model_name %><
  AttributesType extends <%= model_name %>AttributesType = <%= model_name %>AttributesType
> extends <%= base_ts_class %><
<% if entity? %>
  <%= model_name %>PrimaryKeyType,
<% end %>
AttributesType
> {
  static readonly modelName: string = "<%= model_name %>"
<% if entity? %>
  static readonly entityName: string = "<%= model_name %>"
  static readonly primaryKeyAttributeName: "<%= primary_key_name %>" = "<%= primary_key_name %>"

  get <%= primary_key_name %> (): <%= model_name %>PrimaryKeyType {
    return this.primaryKey
  }
<% end %>

  get associationPropertyNames (): (keyof <%= model_name %>AttributesType)[] { return <%= association_property_names_ts_array %> }
  readonly hasAssociations: <%= has_associations? %> = <%= has_associations? %>

  <% attribute_names.each do |attribute_name| %>
  get <%= attribute_name %> (): AttributesType["<%= attribute_name %>"] {
    return this.readAttribute("<%= attribute_name %>")
  }
  <% end %>
}
